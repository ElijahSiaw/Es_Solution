{"title":"Using Add javascript to your web page in HTML","tag":"web/html/how_to/add_javascript_to_your_web_page","post":"\n\n{{Sidebar(\"web/html\")}}\n\nTake your webpages to the next level by harnessing JavaScript. Learn in this article how to trigger JavaScript right from your HTML documents.\n\n<table>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Prerequisites:</th>\n      <td>\n        You need to be familiar with how to\n        <a href=\"/blog/Learn_web_development/Getting_started/Your_first_website\"\n          >create a basic HTML document</a\n        >.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Objective:</th>\n      <td>\n        Learn how to trigger JavaScript in your HTML file, and learn the most\n        important best practices for keeping JavaScript accessible.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n## About JavaScript\n\n{{Glossary(\"JavaScript\")}} is a programming language mostly used client-side to make webpages interactive. You _can_ create amazing webpages without JavaScript, but JavaScript opens up a whole new level of possibilities.\n\n> [!NOTE]\n> In this article we're going over the HTML code you need to make JavaScript take effect. If you want to learn JavaScript itself, you can start with our [JavaScript basics](/blog/Learn_web_development/Getting_started/Your_first_website/Adding_interactivity) article. If you already know something about JavaScript or if you have a background with other programming languages, we suggest you jump directly into our [JavaScript Guide](/blog/Web/JavaScript/Guide).\n\n## How to trigger JavaScript from HTML\n\nWithin a browser, JavaScript doesn't do anything by itself. You run JavaScript from inside your HTML webpages. To call JavaScript code from within HTML, you need the {{htmlelement(\"script\")}} element. There are two ways to use `script`, depending on whether you're linking to an external script or embedding a script right in your webpage.\n\n### Linking an external script\n\nUsually, you'll be writing scripts in their own .js files. If you want to execute a .js script from your webpage, just use {{HTMLElement ('script')}} with an `src` attribute pointing to the script file, using its [URL](/blog/Learn_web_development/Howto/Web_mechanics/What_is_a_URL):\n\n```html\n<script src=\"path/to/my/script.js\"></script>\n```\n\n### Writing JavaScript within HTML\n\nYou may also add JavaScript code between `<script>` tags rather than providing an `src` attribute.\n\n```html\n<script>\n  window.addEventListener(\"load\", () => {\n    console.log(\"This function is executed once the page is fully loaded\");\n  });\n</script>\n```\n\nThat's convenient when you just need a small bit of JavaScript, but if you keep JavaScript in separate files you'll find it easier to\n\n- focus on your work\n- write self-sufficient HTML\n- write structured JavaScript applications\n\n## Use scripting accessibly\n\nAccessibility is a major issue in any software development. JavaScript can make your website more accessible if you use it wisely, or it can become a disaster if you use scripting without care. To make JavaScript work in your favor, it's worth knowing about certain best practices for adding JavaScript:\n\n- **Make all content available as (structured) text.** Rely on HTML for your content as much as possible. For example, if you've implemented a nice JavaScript progress bar, make sure to supplement it with matching text percentages inside the HTML. Likewise, your drop-down menus should be structured as [unordered lists](/blog/Learn_web_development/Core/Structuring_content/Lists#unordered_lists) of [links](/blog/Learn_web_development/Core/Structuring_content/Creating_links).\n- **Make all functionality accessible from the keyboard.**\n\n  - Let users Tab through all controls (e.g., links and form input) in a logical order.\n  - If you use pointer events (like mouse events or touch events), duplicate the functionality with keyboard events.\n  - Test your site using a keyboard only.\n\n- **Don't set nor even guess time limits.** It takes extra time to navigate with the keyboard or hear content read out. You can hardly ever predict just how long it will take for users or browsers to complete a process (especially asynchronous actions such as loading resources).\n- **Keep animations subtle and brief with no flashing.** Flashing is annoying and can [cause seizures](https://www.w3.org/TR/UNDERSTANDING-WCAG20/seizure-does-not-violate.html). Additionally, if an animation lasts more than a couple seconds, give the user a way to cancel it.\n- **Let users initiate interactions.** That means, don't update content, redirect, or refresh automatically. Don't use carousels or display popups without warning.\n- **Have a plan B for users without JavaScript.** People may have JavaScript turned off to improve speed and security, and users often face network issues that prevent loading scripts. Moreover, third-party scripts (ads, tracking scripts, browser extensions) might break your scripts.\n\n  - At a minimum, leave a short message with {{HTMLElement(\"noscript\")}} like this: `<noscript>To use this site, please enable JavaScript.</noscript>`\n  - Ideally, replicate the JavaScript functionality with HTML and server-side scripting when possible.\n  - If you're only looking for simple visual effects, CSS can often get the job done even more intuitively.\n  - _Since almost everybody **does** have JavaScript enabled, `<noscript>` is no excuse for writing inaccessible scripts._\n\n## Learn more\n\n- {{htmlelement(\"script\")}}\n- {{htmlelement(\"noscript\")}}\n- [Writing JavaScript with Accessibility in Mind](https://www.sitepoint.com/writing-javascript-with-accessibility-in-mind/) by Manuel Matuzovic (2017)\n- [Accessibility guidelines from W3C](https://w3c.github.io/wcag/guidelines/22/)\n","slug":"9eb576a356ea4f3aac02eda9e552c5b6","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-06T20:42:50.592Z","dateupdated":"2025-07-06T20:42:50.592Z","layout":"PostLayout"}