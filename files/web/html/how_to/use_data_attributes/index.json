{"title":"Using Use data attributes in HTML","tag":"web/html/how_to/use_data_attributes","post":"\n\n{{Sidebar(\"web/html\")}}\n\nHTML is designed with extensibility in mind for data that should be associated with a particular element but need not have any defined meaning. [`data-*` attributes](/blog/Web/HTML/Reference/Global_attributes/data-*) allow us to store extra information on standard, semantic HTML elements without other hacks such as non-standard attributes, or extra properties on DOM.\n\n## HTML syntax\n\nThe syntax is simple. Any attribute on any element whose attribute name starts with `data-` is a data attribute. Say you have some articles and you want to store some extra information that doesn't have any visual representation. Just use `data` attributes for that:\n\n```html\n<main>\n  <article\n    id=\"electric-cars\"\n    data-columns=\"3\"\n    data-index-number=\"12314\"\n    data-parent=\"cars\">\n    <!-- Electric car content -->\n  </article>\n\n  <article\n    id=\"solar-cars\"\n    data-columns=\"3\"\n    data-index-number=\"12315\"\n    data-parent=\"cars\">\n    <!-- Solar car content -->\n  </article>\n\n  <article\n    id=\"flying-cars\"\n    data-columns=\"4\"\n    data-index-number=\"12316\"\n    data-parent=\"cars\">\n    <!-- Flying car content -->\n  </article>\n</main>\n```\n\n## JavaScript access\n\nReading the values of these attributes out in [JavaScript](/blog/Web/JavaScript) is also very simple. You could use {{domxref(\"Element.getAttribute\", \"getAttribute()\")}} with their full HTML name to read them, but the standard defines a simpler way: a {{domxref(\"DOMStringMap\")}} you can read out via a {{domxref(\"HTMLElement/dataset\", \"dataset\")}} property.\n\nTo get a `data` attribute through the `dataset` object, get the property by the part of the attribute name after `data-` (note that dashes are converted to {{Glossary(\"camel_case\", \"camel case\")}}).\n\n```js\nconst article = document.querySelector(\"#electric-cars\");\n// The following would also work:\n// const article = document.getElementById(\"electric-cars\")\n\narticle.dataset.columns; // \"3\"\narticle.dataset.indexNumber; // \"12314\"\narticle.dataset.parent; // \"cars\"\n```\n\nEach property is a string and can be read and written. In the above case setting `article.dataset.columns = 5` would change that attribute to `\"5\"`.\n\nYou can also use [`document.querySelector()`](/blog/Web/API/Document/querySelector) or [`document.querySelectorAll()`](/blog/Web/API/Document/querySelectorAll) with data attribute selectors to find one element or all elements that match:\n\n```js\n// Find all elements with a data-columns attribute\nconst articles = document.querySelectorAll(\"[data-columns]\");\n\n// Find all elements with data-columns=\"3\"\nconst threeColumnArticles = document.querySelectorAll('[data-columns=\"3\"]');\n// You can then iterate over the results\nthreeColumnArticles.forEach((article) => {\n  console.log(article.dataset.indexNumber);\n});\n```\n\n## CSS access\n\nNote that, as data attributes are plain HTML attributes, you can even access them from [CSS](/blog/Web/CSS). For example to show the parent data on the article you can use [generated content](/blog/Web/CSS/content) in CSS with the [`attr()`](/blog/Web/CSS/attr) function:\n\n```css\narticle::before {\n  content: attr(data-parent);\n}\n```\n\nYou can also use the [attribute selectors](/blog/Web/CSS/Attribute_selectors) in CSS to change styles according to the data:\n\n```css\narticle[data-columns=\"3\"] {\n  width: 400px;\n}\narticle[data-columns=\"4\"] {\n  width: 600px;\n}\n```\n\nYou can see all this working together [in this JS Bin example](https://jsbin.com/ujiday/2/edit).\n\nData attributes can also be stored to contain information that is constantly changing, like scores in a game. Using the CSS selectors and JavaScript access here this allows you to build some nifty effects without having to write your own display routines. See [this screencast](https://www.youtube.com/watch?v=On_WyUB1gOk) for an example using generated content and CSS transitions ([JS Bin example](https://jsbin.com/atawaz/3/edit)).\n\nData values are strings. Number values must be quoted in the selector for the styling to take effect.\n\n## Issues\n\nDo not store content that should be visible and accessible in data attributes, because assistive technology may not access them. In addition, search crawlers may not index data attributes' values.\n\n## See also\n\n- This article is adapted from [Using data attributes in JavaScript and CSS on hacks.mozilla.org](https://hacks.mozilla.org/2012/10/using-data-attributes-in-javascript-and-css/).\n- Custom attributes are also supported in SVG 2; see {{domxref(\"HTMLElement.dataset\")}} and {{SVGAttr(\"data-*\")}} for more information.\n- [How to use HTML data attributes](https://www.sitepoint.com/how-why-use-html5-custom-data-attributes/) (Sitepoint)\n","slug":"309fbea4130e4ea2ba2163b06a32bb7a","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-06T20:42:51.941Z","dateupdated":"2025-07-06T20:42:51.941Z","layout":"PostLayout"}