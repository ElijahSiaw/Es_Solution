{"title":"HTML attribute: Step","tag":"web/html/reference/attributes/step","post":"\n\n{{Sidebar(\"web/html/reference/attributes\")}}\n\nThe **`step`** attribute is a number that specifies the granularity that the value must adhere to or the keyword `any`. It is valid for the numeric input types, including the {{HTMLElement(\"input/date\", \"date\")}}, {{HTMLElement(\"input/month\", \"month\")}}, {{HTMLElement(\"input/week\", \"week\")}}, {{HTMLElement(\"input/time\", \"time\")}}, {{HTMLElement(\"input/datetime-local\", \"datetime-local\")}}, {{HTMLElement(\"input/number\", \"number\")}} and {{HTMLElement(\"input/range\", \"range\")}} types.\n\nThe `step` sets the _stepping interval_ when clicking up and down spinner buttons, moving a slider left and right on a range, and validating the different date types. If not explicitly included, `step` defaults to 1 for `number` and `range`, and 1 unit type (minute, week, month, day) for the date/time input types. The value must be a positive number - integer or float â€” or the special value `any`, which means no stepping is implied and any value is allowed (barring other constraints, such as [`min`](/blog/Web/HTML/Reference/Attributes/min) and [`max`](/blog/Web/HTML/Reference/Attributes/max)).\n\nThe default stepping value for `number` inputs is 1, allowing only integers to be entered, _unless_ the stepping base is not an integer. The default stepping value for `time` is 60 seconds, with 900 being equal to 15 minutes.\n\n## Syntax\n\n<table class=\"no-markdown\">\n  <caption>\n    Default values for step\n  </caption>\n  <thead>\n    <tr>\n      <th>Input type</th>\n      <th>Value</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>{{HTMLElement(\"input/date\", \"date\")}}</td>\n      <td>1 (day)</td>\n      <td><code>&#x3C;input type=\"date\" min=\"2019-12-25\" step=\"1\"></code></td>\n    </tr>\n    <tr>\n      <td>{{HTMLElement(\"input/month\", \"month\")}}</td>\n      <td>1 (month)</td>\n      <td><code>&#x3C;input type=\"month\" min=\"2019-12\" step=\"12\"></code></td>\n    </tr>\n    <tr>\n      <td>{{HTMLElement(\"input/week\", \"week\")}}</td>\n      <td>1 (week)</td>\n      <td><code>&#x3C;input type=\"week\" min=\"2019-W23\" step=\"2\"></code></td>\n    </tr>\n    <tr>\n      <td>{{HTMLElement(\"input/time\", \"time\")}}</td>\n      <td>60 (seconds)</td>\n      <td><code>&#x3C;input type=\"time\" min=\"09:00\" step=\"900\"></code></td>\n    </tr>\n    <tr>\n      <td>\n        {{HTMLElement(\"input/datetime-local\", \"datetime-local\")}}\n      </td>\n      <td>60 (seconds)</td>\n      <td>\n        <code\n          >&#x3C;input type=\"datetime-local\" min=\"2019-12-25T19:30\"\n          step=\"900\"></code\n        >\n      </td>\n    </tr>\n    <tr>\n      <td>{{HTMLElement(\"input/number\", \"number\")}}</td>\n      <td>1</td>\n      <td>\n        <code>&#x3C;input type=\"number\" min=\"0\" step=\"0.1\" max=\"10\"></code>\n      </td>\n    </tr>\n    <tr>\n      <td>{{HTMLElement(\"input/range\", \"range\")}}</td>\n      <td>1</td>\n      <td><code>&#x3C;input type=\"range\" min=\"0\" step=\"2\" max=\"10\"></code></td>\n    </tr>\n  </tbody>\n</table>\n\nIf `any` is not explicitly set, valid values for the `number`, date/time input types, and `range` input types are equal to the basis for stepping - the [`min`](/blog/Web/HTML/Reference/Attributes/min) value and increments of the step value, up to the [`max`](/blog/Web/HTML/Reference/Attributes/max) value, if specified. The following example results in any even integer, 10 or greater, being valid:\n\n```html\n<input type=\"number\" min=\"10\" step=\"2\" />\n```\n\nIf `step` is omitted, any integer is valid but floats like 4.2 are not valid as `step` defaults to 1. For 4.2 to be valid:\n\n- either `step` would have to be set to `any`, 0.1, or 0.2,\n- or the `min` value would have to be a number ending in .2, such as 0.2, 1.2, or -5.2.\n\n## Examples\n\n### `min` impact on step\n\nThe value of `min` defines valid values, even if the `step` attribute is not included. This is because `step` defaults to `1` for the `number` input type.\n\nIn this example, we add a big red border around invalid inputs:\n\n```css\ninput:invalid {\n  border: solid red 3px;\n}\n```\n\nWe then define an input with a minimum value of 1.2 and a step value of 2:\n\n```html\n<input id=\"myNumber\" name=\"myNumber\" type=\"number\" step=\"2\" min=\"1.2\" />\n```\n\nValid values include 1.2, 3.2, 5.2, 7.2, 9.2, 11.2, and so on. Only floats with an odd-numbered integer part and a decimal part of .2 are valid. The number spinner, if present, generates valid float values of 1.2 and greater, in increments of 2.\n\n{{EmbedLiveSample(\"min_impact_on_step\",\"100%\",55)}}\n\n> [!NOTE]\n> When the data entered by the user doesn't adhere to the stepping configuration, the value is considered invalid in constraint validation and will match the {{cssxref(\":invalid\")}} and {{cssxref(\":out-of-range\")}} pseudoclasses.\n\nSee [Client-side validation](/blog/Web/HTML/Guides/Constraint_validation) and {{domxref(\"ValidityState.stepMismatch\", \"stepMismatch\")}} for more information.\n\n## Accessibility concerns\n\nProvide instructions to help users understand how to complete the form and use individual form controls. Indicate any required and optional input, data formats, and other relevant information. When using the `min` attribute, ensure this minimum requirement is understood by the user. Providing instructions within the {{htmlelement('label')}} may be sufficient. If providing instructions outside of labels, which allows more flexible positioning and design, consider using [`aria-labelledby`](/blog/Web/Accessibility/ARIA/Reference/Attributes/aria-labelledby) or [`aria-describedby`](/blog/Web/Accessibility/ARIA/Reference/Attributes/aria-describedby).\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`max`](/blog/Web/HTML/Reference/Attributes/max)\n- [`min`](/blog/Web/HTML/Reference/Attributes/min)\n- [Constraint validation](/blog/Web/HTML/Guides/Constraint_validation)\n- [Form validation](/blog/Learn_web_development/Extensions/Forms/Form_validation)\n- {{domxref('validityState.stepMismatch')}}\n- {{cssxref(':out-of-range')}}\n- {{htmlelement('input')}}\n- {{HTMLElement(\"input/date\", \"date\")}}, {{HTMLElement(\"input/month\", \"month\")}}, {{HTMLElement(\"input/week\", \"week\")}}, {{HTMLElement(\"input/time\", \"time\")}}, {{HTMLElement(\"input/datetime-local\", \"datetime-local\")}}, {{HTMLElement(\"input/number\", \"number\")}} and {{HTMLElement(\"input/range\", \"range\")}} types, and the {{htmlelement('meter')}}\n","slug":"154e0db174054ec5a1063ea27f2f404e","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-06T10:27:29.118Z","dateupdated":"2025-07-06T10:27:29.118Z","layout":"PostBanner"}