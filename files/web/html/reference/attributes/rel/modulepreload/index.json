{"title":"HTML attribute: Modulepreload","tag":"web/html/reference/attributes/rel/modulepreload","post":"\n\n{{Sidebar(\"web/html/reference/attributes\")}}\n\nThe **`modulepreload`** keyword, for the [`rel`](/blog/Web/HTML/Reference/Attributes/rel) attribute of the {{HTMLElement(\"link\")}} element, provides a declarative way to preemptively fetch a [module script](/blog/Web/JavaScript/Guide/Modules), parse and compile it, and store it in the document's module map for later execution.\n\nPreloading allows modules and their dependencies to be downloaded early, and can also significantly reduce the overall download and processing time.\nThis is because it allows pages to fetch modules in parallel, instead of sequentially as each module is processed and its dependencies are discovered.\nNote however that you can't just preload everything!\nWhat you choose to preload must be balanced against other operations that might then be starved, adversely affecting user experience.\n\nLinks with `rel=\"modulepreload\"` are similar to those with [`rel=\"preload\"`](/blog/Web/HTML/Reference/Attributes/rel/preload).\nThe main difference is that `preload` just downloads the file and stores it in the cache, while `modulepreload` gets the module, parses and compiles it, and puts the results into the module map so that it is ready to execute.\n\nWhen using `modulepreload` the fetch request mode is always [`cors`](/blog/Web/API/Request/mode#cors), and the [`crossorigin`](/blog/Web/HTML/Reference/Attributes/crossorigin) property is used to determine the request [credential mode](/blog/Web/API/Request/credentials).\nIf `crossorigin` is set to [`anonymous`](/blog/Web/HTML/Reference/Attributes/crossorigin#anonymous) or [`\"\"`](/blog/Web/HTML/Reference/Attributes/crossorigin#sect) (default), then the credentials mode is [`same-origin`](/blog/Web/API/Request/credentials#same-origin), and user credentials such as cookies and authentication are only sent for requests with the `same-origin`.\nIf `crossorigin` is set to [`use-credentials`](/blog/Web/HTML/Reference/Attributes/crossorigin#use-credentials) then the credentials mode is [`include`](/blog/Web/API/Request/credentials#include), and user credentials for both single- and cross-origin requests.\n\nThe [`as`](/blog/Web/HTML/Reference/Elements/link#as) attribute is optional for links with `rel=\"modulepreload\"`, and defaults to `\"script\"`.\nIt can be set to `\"script\"` or any script-like destination, such as `\"audioworklet\"`, `\"paintworklet\"`, `\"serviceworker\"`, `\"sharedworker\"`, or `\"worker\"`.\nAn [`Event`](/blog/Web/API/Event/Event) named \"error\" is fired on the element if any other destination is used.\n\nA browser _may_ additionally also choose to automatically fetch any dependencies of the module resource.\nNote however that this is a browser-specific optimization â€” the only approach to ensure that all browsers will try to preload a module's dependencies is to individually specify them!\nFurther, the events named `load` or `error` fire immediately following success or failure of loading the _specified_ resources.\nIf dependencies are automatically fetched, no additional events are fired in the main thread (although you might monitor additional requests in a service worker or on the server).\n\n## Examples\n\nConsider the [basic-modules](https://github.com/es_solution/js-examples/tree/main/module-examples/basic-modules) example ([live version](https://es_solution.github.io/js-examples/module-examples/basic-modules/)), introduced in the [JavaScript modules](/blog/Web/JavaScript/Guide/Modules#basic_example_structure) guide.\n\nThis has a file structure as shown below, consisting of the top level module `main.js`, which statically imports two dependency modules `modules/canvas.js` and `modules/square.js` using the [`import` statement](/blog/Web/JavaScript/Reference/Statements/import).\n\n```plain\nindex.html\nmain.js\nmodules/\n    canvas.js\n    square.js\n```\n\nThe HTML for the example below shows how `main.js` is fetched in a `<script>` element.\nOnly after `main.js` has loaded does the browser discover and fetch the two dependency modules.\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Basic JavaScript module example</title>\n    <script type=\"module\" src=\"main.js\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\nThe HTML below updates the example to use `<link>` elements with `rel=\"modulepreload\"` for the main file and each of the dependency modules.\nThis is much faster because the three modules all start downloading asynchronously and in parallel before they are needed.\nBy the time `main.js` has been parsed and its dependencies are known, they have already been fetched and downloaded.\n\n```html\n<!doctype html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Basic JavaScript module example</title>\n    <link rel=\"modulepreload\" href=\"main.js\" />\n    <link rel=\"modulepreload\" href=\"modules/canvas.js\" />\n    <link rel=\"modulepreload\" href=\"modules/square.js\" />\n    <script type=\"module\" src=\"main.js\"></script>\n  </head>\n  <body></body>\n</html>\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [Speculative loading](/blog/Web/Performance/Guides/Speculative_loading) for a comparison of `<link rel=\"modulepreload\">` and other similar performance improvement features.\n- [Preloading modules](https://web.dev/articles/modulepreload) on web.dev\n","slug":"25e3edcea512482b8003fb3da916d0d8","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-06T10:27:21.791Z","dateupdated":"2025-07-06T10:27:21.791Z","layout":"PostBanner"}