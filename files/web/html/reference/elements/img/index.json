{"title":"Img","tag":"html/reference/elements/img","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\nThe **`<img>`** [HTML](/blog/Web/HTML) element embeds an image into the document.\n\n{{InteractiveExample(\"HTML Demo: &lt;img&gt;\", \"tabbed-standard\")}}\n\n```html interactive-example\n<img\n  class=\"fit-picture\"\n  src=\"/shared-assets/images/examples/grapefruit-slice.jpg\"\n  alt=\"Grapefruit slice atop a pile of other slices\" />\n```\n\n```css interactive-example\n.fit-picture {\n  width: 250px;\n}\n```\n\nThe above example shows usage of the `<img>` element:\n\n- The `src` attribute holds the path to the image you want to embed. It is not mandatory if the [srcset](/blog/Web/API/HTMLImageElement/srcset) attribute is available. However, at least one of the `src` or `srcset` attributes must be provided.\n- The `alt` attribute holds a textual replacement for the image, which is mandatory and **incredibly useful** for accessibility — screen readers read the attribute value out to their users so they know what the image means. Alt text is also displayed on the page if the image can't be loaded for some reason: for example, network errors, content blocking, or link rot.\n\nThere are many other attributes to achieve various purposes:\n\n- [Referrer](/blog/Web/HTTP/Reference/Headers/Referrer-Policy)/{{glossary(\"CORS\")}} control for security and privacy: see [`crossorigin`](#crossorigin) and [`referrerpolicy`](#referrerpolicy).\n- Use both [`width`](#width) and [`height`](#height) to set the intrinsic size of the image, allowing it to take up space before it loads, to mitigate content layout shifts.\n- Responsive image hints with [`sizes`](#sizes) and [`srcset`](#srcset) (see also the {{htmlelement(\"picture\")}} element and our [Responsive images](/blog/Web/HTML/Guides/Responsive_images) tutorial).\n\n## Supported image formats\n\nThe HTML standard doesn't list what image formats to support, so {{glossary(\"user agent\",\"user agents\")}} may support different formats.\n\n> [!NOTE]\n> The [Image file type and format guide](/blog/Web/Media/Guides/Formats/Image_types) provides comprehensive information about image formats and their web browser support.\n> This section is just a summary!\n\nThe image file formats that are most commonly used on the web are:\n\n- [APNG (Animated Portable Network Graphics)](/blog/Web/Media/Guides/Formats/Image_types#apng_animated_portable_network_graphics) — Good choice for lossless animation sequences (GIF is less performant)\n- [AVIF (AV1 Image File Format)](/blog/Web/Media/Guides/Formats/Image_types#avif_image) — Good choice for both images and animated images due to high performance.\n- [GIF (Graphics Interchange Format)](/blog/Web/Media/Guides/Formats/Image_types#gif_graphics_interchange_format) — Good choice for _simple_ images and animations.\n- [JPEG (Joint Photographic Expert Group image)](/blog/Web/Media/Guides/Formats/Image_types#jpeg_joint_photographic_experts_group_image) — Good choice for lossy compression of still images (currently the most popular).\n- [PNG (Portable Network Graphics)](/blog/Web/Media/Guides/Formats/Image_types#png_portable_network_graphics) — Good choice for lossless compression of still images (slightly better quality than JPEG).\n- [SVG (Scalable Vector Graphics)](/blog/Web/Media/Guides/Formats/Image_types#svg_scalable_vector_graphics) — Vector image format. Use for images that must be drawn accurately at different sizes.\n- [WebP (Web Picture format)](/blog/Web/Media/Guides/Formats/Image_types#webp_image) — Excellent choice for both images and animated images\n\nFormats like [WebP](/blog/Web/Media/Guides/Formats/Image_types#webp_image) and [AVIF](/blog/Web/Media/Guides/Formats/Image_types#avif_image) are recommended as they perform much better than PNG, JPEG, GIF for both still and animated images.\n\nSVG remains the recommended format for images that must be drawn accurately at different sizes.\n\n## Image loading errors\n\nIf an error occurs while loading or rendering an image, and an `onerror` event handler has been set for the {{domxref(\"HTMLElement/error_event\", \"error\")}} event, that event handler will get called. This can happen in several situations, including:\n\n- The `src` or `srcset` attributes are empty (`\"\"`) or `null`.\n- The `src` {{glossary(\"URL\")}} is the same as the URL of the page the user is currently on.\n- The image is corrupted in some way that prevents it from being loaded.\n- The image's metadata is corrupted in such a way that it's impossible to retrieve its dimensions, and no dimensions were specified in the `<img>` element's attributes.\n- The image is in a format not supported by the {{Glossary(\"user agent\")}}.\n\n## Attributes\n\nThis element includes the [global attributes](/blog/Web/HTML/Reference/Global_attributes).\n\n- [`alt`](/blog/Web/API/HTMLImageElement/alt#usage_notes)\n\n  - : Defines text that can replace the image in the page.\n\n    > [!NOTE]\n    > Browsers do not always display images. There are a number of situations in which a browser might not display images, such as:\n    >\n    > - Non-visual browsers (such as those used by people with visual impairments)\n    > - The user chooses not to display images (saving bandwidth, privacy reasons)\n    > - The image is invalid or an [unsupported type](#supported_image_formats)\n    >\n    > In these cases, the browser may replace the image with the text in the element's `alt` attribute. For these reasons and others, provide a useful value for `alt` whenever possible.\n\n    Setting this attribute to an empty string (`alt=\"\"`) indicates that this image is _not_ a key part of the content (it's decoration or a tracking pixel), and that non-visual browsers may omit it from {{glossary(\"Engine/Rendering\", \"rendering\")}}. Visual browsers will also hide the broken image icon if the `alt` attribute is empty and the image failed to display.\n\n    This attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark.\n\n- `attributionsrc` {{experimental_inline}}\n\n  - : Specifies that you want the browser to send an {{httpheader(\"Attribution-Reporting-Eligible\")}} header along with the image request.\n\n    On the server-side this is used to trigger sending an {{httpheader(\"Attribution-Reporting-Register-Source\")}} or {{httpheader(\"Attribution-Reporting-Register-Trigger\")}} header in the response, to register an image-based [attribution source](/blog/Web/API/Attribution_Reporting_API/Registering_sources#html-based_event_sources) or [attribution trigger](/blog/Web/API/Attribution_Reporting_API/Registering_triggers#html-based_attribution_triggers), respectively. Which response header should be sent back depends on the value of the `Attribution-Reporting-Eligible` header that triggered the registration.\n\n    The corresponding source or trigger event is set off once the browser receives the response containing the image file.\n\n    > [!NOTE]\n    > See the [Attribution Reporting API](/blog/Web/API/Attribution_Reporting_API) for more details.\n\n    There are two versions of this attribute that you can set:\n\n    - Boolean, i.e., just the `attributionsrc` name. This specifies that you want the {{httpheader(\"Attribution-Reporting-Eligible\")}} header sent to the same server as the `src` attribute points to. This is fine when you are handling the attribution source or trigger registration on the same server. When registering an attribution trigger this property is optional, and a boolean value will be used if it is omitted.\n    - Value containing one or more URLs, for example:\n\n    ```html\n    <img\n      src=\"image-file.png\"\n      alt=\"My image file description\"\n      attributionsrc=\"https://a.example/register-source\n                         https://b.example/register-source\" />\n    ```\n\n    This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of `attributionsrc`. When the resource request occurs the {{httpheader(\"Attribution-Reporting-Eligible\")}} header will be sent to the URL(s) specified in `attributionSrc` in addition to the resource origin. These URLs can then respond with a {{httpheader(\"Attribution-Reporting-Register-Source\")}} or {{httpheader(\"Attribution-Reporting-Register-Trigger\")}} header as appropriate to complete registration.\n\n    > [!NOTE]\n    > Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data.\n\n- [`crossorigin`](/blog/Web/HTML/Reference/Attributes/crossorigin)\n\n  - : Indicates if the fetching of the image must be done using a {{glossary(\"CORS\")}} request. Image data from a [CORS-enabled image](/blog/Web/HTML/How_to/CORS_enabled_image) returned from a CORS request can be reused in the {{HTMLElement(\"canvas\")}} element without being marked \"[tainted](/blog/Web/HTML/How_to/CORS_enabled_image#security_and_tainted_canvases)\".\n\n    If the `crossorigin` attribute is _not_ specified, then a non-CORS request is sent (without the {{httpheader(\"Origin\")}} request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in {{HTMLElement(\"canvas\")}} elements.\n\n    If the `crossorigin` attribute _is_ specified, then a CORS request is sent (with the {{httpheader(\"Origin\")}} request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any {{httpheader(\"Access-Control-Allow-Origin\")}} response header, or by not including the site's origin in any {{httpheader(\"Access-Control-Allow-Origin\")}} response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console.\n\n    Allowed values:\n\n    - `anonymous`\n      - : A CORS request is sent with credentials omitted (that is, no {{glossary(\"cookie\", \"cookies\")}}, [X.509 certificates](https://datatracker.ietf.org/doc/html/rfc5280), or {{httpheader(\"Authorization\")}} request header).\n    - `use-credentials`\n      - : The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the `Authorization` request header). If the server does not opt into sharing credentials with the origin site (by sending back the `Access-Control-Allow-Credentials: true` response header), then the browser marks the image as tainted and restricts access to its image data.\n\n    If the attribute has an invalid value, browsers handle it as if the `anonymous` value was used. See [CORS settings attributes](/blog/Web/HTML/Reference/Attributes/crossorigin) for additional information.\n\n- `decoding`\n\n  - : This attribute provides a hint to the browser as to whether it should perform image decoding along with rendering the other DOM content in a single presentation step that looks more \"correct\" (`sync`), or render and present the other DOM content first and then decode the image and present it later (`async`). In practice, `async` means that the next paint does not wait for the image to decode.\n\n    It is often difficult to perceive any noticeable effect when using `decoding` on static `<img>` elements. They'll likely be initially rendered as empty images while the image files are fetched (either from the network or from the cache) and then handled independently anyway, so the \"syncing\" of content updates is less apparent. However, the blocking of rendering while decoding happens, while often quite small, _can_ be measured — even if it is difficult to observe with the human eye. See [What does the image decoding attribute actually do?](https://www.tunetheweb.com/blog/what-does-the-image-decoding-attribute-actually-do/) for a more detailed analysis (tunetheweb.com, 2023).\n\n    Using different `decoding` types can result in more noticeable differences when dynamically inserting `<img>` elements into the DOM via JavaScript — see {{domxref(\"HTMLImageElement.decoding\")}} for more details.\n\n    Allowed values:\n\n    - `sync`\n      - : Decode the image synchronously along with rendering the other DOM content, and present everything together.\n    - `async`\n      - : Decode the image asynchronously, after rendering and presenting the other DOM content.\n    - `auto`\n      - : No preference for the decoding mode; the browser decides what is best for the user. This is the default value.\n\n- [`elementtiming`](/blog/Web/HTML/Reference/Attributes/elementtiming)\n\n  - : Marks the image for observation by the {{domxref(\"PerformanceElementTiming\")}} API. The value given becomes an identifier for the observed image element. See also the [`elementtiming`](/blog/Web/HTML/Reference/Attributes/elementtiming) attribute page.\n\n- `fetchpriority`\n\n  - : Provides a hint of the relative priority to use when fetching the image.\n    Allowed values:\n\n    - `high`\n      - : Fetch the image at a high priority relative to other images.\n    - `low`\n      - : Fetch the image at a low priority relative to other images.\n    - `auto`\n      - : Don't set a preference for the fetch priority.\n        This is the default.\n        It is used if no value or an invalid value is set.\n\n    See {{domxref(\"HTMLImageElement.fetchPriority\")}} for more information.\n\n- `height`\n\n  - : The intrinsic height of the image, in pixels. Must be an integer without a unit.\n\n    > [!NOTE]\n    > Including `height` and [`width`](#width) enables the {{glossary(\"aspect ratio\")}} of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance.\n\n- `ismap`\n\n  - : This Boolean attribute indicates that the image is part of a [server-side map](https://en.wikipedia.org/wiki/Image_map#Server-side). If so, the coordinates where the user clicked on the image are sent to the server.\n\n    > [!NOTE]\n    > This attribute is allowed only if the `<img>` element is a descendant of an {{htmlelement(\"a\")}} element with a valid [`href`](/blog/Web/HTML/Reference/Elements/a#href) attribute. This gives users without pointing devices a fallback destination.\n\n- `loading`\n\n  - : Indicates how the browser should load the image:\n\n    - `eager`\n      - : Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value).\n    - `lazy`\n      - : Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.\n\n    > [!NOTE]\n    > Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when.\n\n    > [!NOTE]\n    > Images with `loading` set to `lazy` will never be loaded if they do not intersect a visible part of an element, even if loading them would change that as unloaded images have a `width` and `height` of `0`. Putting `width` and `height` on lazy-loaded images fixes this issue and is a best practice, [recommended by the specification](https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element). Doing so also helps prevent layout shifts.\n\n- `referrerpolicy`\n\n  - : A string indicating which referrer to use when fetching the resource:\n\n    - `no-referrer`: The {{HTTPHeader(\"Referer\")}} header will not be sent.\n    - `no-referrer-when-downgrade`: The {{HTTPHeader(\"Referer\")}} header will not be sent to {{Glossary(\"origin\")}}s without {{Glossary(\"TLS\")}} ({{Glossary(\"HTTPS\")}}).\n    - `origin`: The sent referrer will be limited to the origin of the referring page: its [scheme](/blog/Learn_web_development/Howto/Web_mechanics/What_is_a_URL), {{Glossary(\"host\")}}, and {{Glossary(\"port\")}}.\n    - `origin-when-cross-origin`: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\n    - `same-origin`: A referrer will be sent for {{Glossary(\"Same-origin policy\", \"same origin\")}}, but cross-origin requests will contain no referrer information.\n    - `strict-origin`: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).\n    - `strict-origin-when-cross-origin` (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).\n    - `unsafe-url`: The referrer will include the origin _and_ the path (but not the [fragment](/blog/Web/API/HTMLAnchorElement/hash), [password](/blog/Web/API/HTMLAnchorElement/password), or [username](/blog/Web/API/HTMLAnchorElement/username)). **This value is unsafe**, because it leaks origins and paths from TLS-protected resources to insecure origins.\n\n- `sizes`\n\n  - : One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:\n\n    1. A [media condition](/blog/Web/CSS/CSS_media_queries/Using_media_queries#syntax). This must be omitted for the last item in the list.\n    2. A source size value.\n\n    Media Conditions describe properties of the _viewport_, not of the _image_. For example, `(max-height: 500px) 1000px` proposes to use a source of 1000px width, if the _viewport_ is not higher than 500px. Because a source size descriptor is used to specify the width to use for the image during layout of the page, the media condition is typically (but not necessarily) based on the [width](/blog/Web/CSS/@media/width) information.\n\n    Source size values specify the intended display size of the image. {{glossary(\"User agent\", \"User agents\")}} use the current source size to select one of the sources supplied by the `srcset` attribute, when those sources are described using width (`w`) descriptors. The selected source size affects the {{glossary(\"intrinsic size\")}} of the image (the image's display size if no {{glossary(\"CSS\")}} styling is applied). If the `srcset` attribute is absent, or contains no values with a width descriptor, then the `sizes` attribute has no effect.\n\n    A source size value can be any non-negative [length](/blog/Web/CSS/length). It must not use CSS functions other than the [math functions](/blog/Web/CSS/CSS_Values_and_Units/CSS_Value_Functions#math_functions). Units are interpreted in the same way as [media queries](/blog/Web/CSS/CSS_media_queries), meaning that all relative length units are relative to the document root rather than the `<img>` element, so an `em` value is relative to the root font size, rather than the font size of the image. [Percentage](/blog/Web/CSS/percentage) values are not allowed.\n\n    The `sizes` attribute also accepts the following keyword values:\n\n    - `auto`\n\n      - : `auto` can replace the whole list of sizes or the first entry in the list. It is only valid when combined with `loading=\"lazy\"`, and resolves to the [concrete size](/blog/Web/CSS/image) of the image. Since the intrinsic size of the image is not yet known, `width` and `height` attributes (or CSS equivalents) should also be specified to [prevent the browser assuming a default width of 300px](https://html.spec.whatwg.org/multipage/images.html#sizes-attributes:attr-dim-width).\n\n- `src`\n  - : The image {{glossary(\"URL\")}}. Mandatory for the `<img>` element. On {{glossary(\"Browser\", \"browsers\")}} supporting `srcset`, `src` is treated like a candidate image with a pixel density descriptor `1x`, unless an image with this pixel density descriptor is already defined in `srcset`, or unless `srcset` contains `w` descriptors.\n- `srcset`\n\n  - : One or more strings separated by commas, indicating possible image sources for the {{glossary(\"user agent\")}} to use. Each string is composed of:\n\n    1. A {{glossary(\"URL\")}} to an image\n    2. Optionally, whitespace followed by one of:\n\n       - A width descriptor (a positive integer directly followed by `w`). The width descriptor is divided by the source size given in the `sizes` attribute to calculate the effective pixel density.\n       - A pixel density descriptor (a positive floating point number directly followed by `x`).\n\n    If no descriptor is specified, the source is assigned the default descriptor of `1x`.\n\n    It is incorrect to mix width descriptors and pixel density descriptors in the same `srcset` attribute. Duplicate descriptors (for instance, two sources in the same `srcset` which are both described with `2x`) are also invalid.\n\n    If the `srcset` attribute uses width descriptors, the `sizes` attribute must also be present, or the `srcset` itself will be ignored.\n\n    The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or {{glossary(\"bandwidth\")}} conditions. See our [Responsive images](/blog/Web/HTML/Guides/Responsive_images) tutorial for an example.\n\n- `width`\n  - : The intrinsic width of the image in pixels. Must be an integer without a unit.\n- `usemap`\n\n  - : The partial {{glossary(\"URL\")}} (starting with `#`) of an [image map](/blog/Web/HTML/Reference/Elements/map) associated with the element.\n\n    > [!NOTE]\n    > You cannot use this attribute if the `<img>` element is inside an {{htmlelement(\"a\")}} or {{HTMLElement(\"button\")}} element.\n\n### Deprecated attributes\n\n- `align` {{deprecated_inline}}\n\n  - : Aligns the image with its surrounding context. Use the {{cssxref('float')}} and/or {{cssxref('vertical-align')}} {{glossary(\"CSS\")}} properties instead of this attribute. Allowed values:\n\n    - `top`\n      - : Equivalent to `vertical-align: top` or `vertical-align: text-top`\n    - `middle`\n      - : Equivalent to `vertical-align: -moz-middle-with-baseline`\n    - `bottom`\n      - : The default, equivalent to `vertical-align: unset` or `vertical-align: initial`\n    - `left`\n      - : Equivalent to `float: left`\n    - `right`\n      - : Equivalent to `float: right`\n\n- `border` {{deprecated_inline}}\n  - : The width of a border around the image. Use the {{cssxref('border')}} {{glossary(\"CSS\")}} property instead.\n- `hspace` {{deprecated_inline}}\n  - : The number of pixels of white space on the left and right of the image. Use the {{cssxref('margin')}} CSS property instead.\n- `longdesc` {{deprecated_inline}}\n\n  - : A link to a more detailed description of the image. Possible values are a {{glossary(\"URL\")}} or an element [`id`](/blog/Web/HTML/Reference/Global_attributes/id).\n\n    > [!NOTE]\n    > This attribute is considered obsolete in the [HTML spec](https://html.spec.whatwg.org/multipage/obsolete.html#element-attrdef-img-longdesc). It has an uncertain future; authors should use a {{glossary(\"WAI\")}}-{{glossary(\"ARIA\")}} alternative such as [`aria-describedby`](/blog/Web/Accessibility/ARIA/Reference/Attributes/aria-describedby) or [`aria-details`](/blog/Web/Accessibility/ARIA/Reference/Attributes/aria-details).\n\n- `name` {{deprecated_inline}}\n  - : A name for the element. Use the [`id`](/blog/Web/HTML/Reference/Global_attributes/id) attribute instead.\n- `vspace` {{deprecated_inline}}\n  - : The number of pixels of white space above and below the image. Use the {{cssxref('margin')}} CSS property instead.\n\n## Styling with CSS\n\n`<img>` is a {{ glossary(\"replaced elements\", \"replaced element\")}}; it has a {{cssxref(\"display\")}} value of `inline` by default, but its default dimensions are defined by the embedded image's intrinsic values, like it were `inline-block`. You can set properties like {{cssxref(\"border\")}}/{{cssxref(\"border-radius\")}}, {{cssxref(\"padding\")}}/{{cssxref(\"margin\")}}, {{cssxref(\"width\")}}, {{cssxref(\"height\")}}, etc. on an image.\n\n`<img>` has no baseline, so when images are used in an inline formatting context with {{cssxref(\"vertical-align\", \"vertical-align: baseline\")}}, the bottom of the image will be placed on the text baseline.\n\nYou can use the {{cssxref(\"object-position\")}} property to position the image within the element's box, and the {{cssxref(\"object-fit\")}} property to adjust the sizing of the image within the box (for example, whether the image should fit the box or fill it even if clipping is required).\n\nDepending on its type, an image may have an intrinsic width and height. For some image types, however, intrinsic dimensions are unnecessary. {{glossary(\"SVG\")}} images, for instance, have no intrinsic dimensions if their root {{SVGElement(\"svg\")}} element doesn't have a `width` or `height` set on it.\n\n## Accessibility\n\n### Authoring meaningful alternate descriptions\n\nAn `alt` attribute's value should provide a clear and concise text replacement for the image's content. It should not describe the presence of the image itself or the file name of the image. If the `alt` attribute is purposefully left off because the image has no textual equivalent, consider alternate methods to present what the image is trying to communicate.\n\n#### Don't\n\n```html example-bad\n<img alt=\"image\" src=\"penguin.jpg\" />\n```\n\n#### Do\n\n```html example-good\n<img alt=\"A Penguin on a beach.\" src=\"penguin.jpg\" />\n```\n\nAn important accessibility test is to read the `alt` attribute content together with preceding textual content to see if it conveys the same meaning as the image. For example, if the image was preceded by the sentence \"On my travels, I saw a cute little animal:\", the _Don't_ example could be read by a screen reader as \"On my travels, I saw a cute little animal: image\", which doesn't make sense. The _Do_ example could be read by a screen reader as \"On my travels, I saw a cute little animal: A Penguin on a beach.\", which does make sense.\n\nFor images used to trigger an action, for example, images nested inside an {{htmlelement(\"a\")}} or {{htmlelement(\"button\")}} element, consider describing the triggered action inside the `alt` attribute value. For example, you could write `alt=\"next page\"` instead of `alt=\"arrow right\"`. You could also consider adding an optional further description inside a `title` attribute; this may be read by screen readers if requested by the user.\n\nWhen an `alt` attribute is not present on an image, some screen readers may announce the image's file name instead. This can be a confusing experience if the file name isn't representative of the image's contents.\n\n- [An alt Decision Tree • Images • WAI Web Accessibility Tutorials](https://www.w3.org/WAI/tutorials/images/decision-tree/)\n- [Alt-texts: The Ultimate Guide — Axess Lab](https://axesslab.com/alt-texts/)\n- [How to Design Great Alt Text: An Introduction | Deque](https://www.deque.com/blog/great-alt-text-introduction/)\n- [Es Solution Understanding WCAG, Guideline 1.1 explanations](/blog/Web/Accessibility/Guides/Understanding_WCAG/Perceivable#guideline_1.1_—_providing_text_alternatives_for_non-text_content)\n- [Understanding Success Criterion 1.1.1 | W3C Understanding WCAG 2.0](https://www.w3.org/TR/UNDERSTANDING-WCAG20/text-equiv-all.html)\n\n### Identifying SVG as an image\n\nDue to a [VoiceOver bug](https://webkit.org/b/216364), VoiceOver does not correctly announce SVG images as images. Include [`role=\"img\"`](/blog/Web/Accessibility/ARIA/Reference/Roles/img_role) to all `<img>` elements with SVG source files to ensure assistive technologies correctly announce the SVG as image content.\n\n```html\n<img src=\"es_solution.svg\" alt=\"Es Solution\" role=\"img\" />\n```\n\n### The title attribute\n\nThe [`title`](/blog/Web/HTML/Reference/Global_attributes/title) attribute is not an acceptable substitute for the `alt` attribute. Additionally, avoid duplicating the `alt` attribute's value in a `title` attribute declared on the same image. Doing so may cause some screen readers to announce the same text twice, creating a confusing experience.\n\nThe `title` attribute should also not be used as supplemental captioning information to accompany an image's `alt` description. If an image needs a caption, use the [`figure`](/blog/Web/HTML/Reference/Elements/figure) and [`figcaption`](/blog/Web/HTML/Reference/Elements/figcaption) elements.\n\nThe value of the `title` attribute is usually presented to the user as a tooltip, which appears shortly after the cursor stops moving over the image. While this _can_ provide additional information to the user, you should not assume that the user will ever see it: the user may only have keyboard or touchscreen. If you have information that's particularly important or valuable for the user, present it inline using one of the methods mentioned above instead of using `title`.\n\n- [Using the HTML title attribute – updated | The Paciello Group](https://www.tpgi.com/using-the-html-title-attribute-updated/)\n\n## Examples\n\n### Alternative text\n\nThe following example embeds an image into the page and includes alternative text for accessibility.\n\n```html\n<img src=\"/shared-assets/images/examples/favicon144.png\" alt=\"Es Solution\" />\n```\n\n{{ EmbedLiveSample('Alternative_text', '100%', '160') }}\n\n### Image link\n\nThis example builds upon the previous one, showing how to turn the image into a link. To do so, nest the `<img>` tag inside the {{HTMLElement(\"a\")}}. You should make the alternative text describe the resource the link is pointing to, as if you were using a text link instead.\n\n```html\n<a href=\"https://developer.mozilla.org\">\n  <img\n    src=\"/shared-assets/images/examples/favicon144.png\"\n    alt=\"Visit the Es Solution site\" />\n</a>\n```\n\n{{ EmbedLiveSample('Image_link', '100%', '160') }}\n\n### Using the srcset attribute\n\nIn this example we include a `srcset` attribute with a reference to a high-resolution version of the logo; this will be loaded instead of the `src` image on high-resolution devices. The image referenced in the `src` attribute is counted as a `1x` candidate in {{glossary(\"User agent\", \"user agents\")}} that support `srcset`.\n\n```html\n<img\n  src=\"/shared-assets/images/examples/favicon72.png\"\n  alt=\"Es Solution\"\n  srcset=\"/shared-assets/images/examples/favicon144.png 2x\" />\n```\n\n{{EmbedLiveSample(\"Using_the_srcset_attribute\", \"100%\", \"160\")}}\n\n### Using the srcset and sizes attributes\n\nThe `src` attribute is ignored in {{glossary(\"User agent\", \"user agents\")}} that support `srcset` when `w` descriptors are included. When the `(max-width: 600px)` media condition matches, the 200 pixel-wide image will load (it is the one that matches `200px` most closely), otherwise the other image will load.\n\n```html\n<img\n  src=\"clock-demo-200px.png\"\n  alt=\"The time is 12:45.\"\n  srcset=\"clock-demo-200px.png 200w, clock-demo-400px.png 400w\"\n  sizes=\"(max-width: 600px) 200px, 50vw\" />\n```\n\n{{EmbedLiveSample(\"Using_the_srcset_and_sizes_attributes\", \"100%\", 350)}}\n\n> [!NOTE]\n> To see the resizing in action, {{LiveSampleLink('Using_the_srcset_and_sizes_attributes', 'view the example on a separate page')}}, so you can actually resize the content area.\n\n## Security and privacy concerns\n\nAlthough `<img>` elements have innocent uses, they can have undesirable consequences for user security and privacy. See [Referer header: privacy and security concerns](/blog/Web/Security/Referer_header:_privacy_and_security_concerns) for more information and mitigations.\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">\n        <a href=\"/blog/Web/HTML/Guides/Content_categories\"\n          >Content categories</a\n        >\n      </th>\n      <td>\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#flow_content\"\n          >Flow content</a\n        >,\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#phrasing_content\"\n          >phrasing content</a\n        >,\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#embedded_content\"\n          >embedded content</a\n        >,\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#palpable_content\"\n          >palpable content</a\n        >. If the element has a <code>usemap</code> attribute, it also is a part\n        of the interactive content category.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Permitted content</th>\n      <td>None; it is a {{Glossary(\"void element\")}}.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Tag omission</th>\n      <td>Must have a start tag and must not have an end tag.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Permitted parents</th>\n      <td>Any element that accepts embedded content.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Implicit ARIA role</th>\n      <td>\n        <ul>\n          <li>\n            with non-empty <code>alt</code> attribute or no\n            <code>alt</code> attribute:\n            <code\n              ><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/img_role\"\n                ><code>img</code></a\n              ></code\n            >\n          </li>\n          <li>\n            with empty <code>alt</code> attribute:\n            <a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/presentation_role\"\n              ><code>presentation</code></a\n            >\n          </li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Permitted ARIA roles</th>\n      <td>\n        <ul>\n          <li>\n            with non-empty <code>alt</code> attribute:\n            <ul>\n              <li>\n                <code\n                  ><a\n                    href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/button_role\"\n                    >button</a\n                  ></code\n                >\n              </li>\n              <li>\n                <code\n                  ><a\n                    href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/checkbox_role\"\n                    >checkbox</a\n                  ></code\n                >\n              </li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/link_role\"><code>link</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/menuitem_role\"><code>menuitem</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/menuitemcheckbox_role\"><code>menuitemcheckbox</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/menuitemradio_role\"><code>menuitemradio</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/option_role\"><code>option</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/progressbar_role\"><code>progressbar</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/scrollbar_role\"><code>scrollbar</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/separator_role\"><code>separator</code></a></li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/slider_role\"><code>slider</code></a></li>\n              <li>\n                <code\n                  ><a\n                    href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/switch_role\"\n                    >switch</a\n                  ></code\n                >\n              </li>\n              <li>\n                <code\n                  ><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/tab_role\"\n                    >tab</a\n                  ></code\n                >\n              </li>\n              <li><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/treeitem_role\"><code>treeitem</code></a></li>\n            </ul>\n          </li>\n          <li>\n            with empty <code>alt</code> attribute, <a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/none_role\"><code>none</code></a>\n            or <a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/presentation_role\"><code>presentation</code></a>\n          </li>\n          <li>\n            with no <code>alt</code> attribute, no <code>role</code> permitted\n          </li>\n        </ul>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">DOM interface</th>\n      <td>{{domxref(\"HTMLImageElement\")}}</td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{HTMLElement(\"picture\")}}, {{HTMLElement(\"object\")}}, and {{HTMLElement(\"embed\")}} elements\n- {{cssxref(\"object-fit\")}}, {{cssxref(\"object-position\")}}, {{cssxref(\"image-orientation\")}}, {{cssxref(\"image-rendering\")}}, and {{cssxref(\"image-resolution\")}}: Image-related CSS properties.\n- {{domxref(\"HTMLImageElement\")}} interface for this element\n- [HTML images](/blog/Learn_web_development/Core/Structuring_content/HTML_images)\n- [Image file type and format guide](/blog/Web/Media/Guides/Formats/Image_types)\n- [Responsive images](/blog/Web/HTML/Guides/Responsive_images)\n","slug":"3c392d9d69714af48580295377797a17","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:06:07.760Z","dateupdated":"2025-07-05T19:06:07.760Z","layout":"PostBanner"}