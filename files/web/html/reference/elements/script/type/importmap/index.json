{"title":"Importmap","tag":"html/reference/elements/script/type/importmap","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\nThe **`importmap`** value of the [`type`](/blog/Web/HTML/Reference/Elements/script/type) attribute of the [`<script>` element](/blog/Web/HTML/Reference/Elements/script) indicates that the body of the element contains an import map.\n\nAn import map is a JSON object that allows developers to control how the browser resolves module specifiers when importing [JavaScript modules](/blog/Web/JavaScript/Guide/Modules).\nIt provides a mapping between the text used as the module specifier in an [`import` statement](/blog/Web/JavaScript/Reference/Statements/import) or [`import()` operator](/blog/Web/JavaScript/Reference/Operators/import), and the corresponding value that will replace the text when resolving the specifier.\nThe JSON object must conform to the [Import map JSON representation format](#import_map_json_representation).\n\nAn import map is used to resolve module specifiers in static and dynamic imports, and therefore must be declared and processed before any `<script>` elements that import modules using specifiers declared in the map.\nNote that the import map applies only to module specifiers in the [`import` statement](/blog/Web/JavaScript/Reference/Statements/import) or [`import()` operator](/blog/Web/JavaScript/Reference/Operators/import) for modules loaded into documents; it does not apply to the path specified in the `src` attribute of a `<script>` element or to modules loaded into workers or worklets.\n\nFor more information, see the [Importing modules using import maps](/blog/Web/JavaScript/Guide/Modules#importing_modules_using_import_maps) section in the JavaScript modules guide.\n\n## Syntax\n\n```html\n<script type=\"importmap\">\n  // JSON object defining import\n</script>\n```\n\nThe `src`, `async`, `nomodule`, `defer`, `crossorigin`, `integrity`, and `referrerpolicy` attributes must not be specified.\n\n### Exceptions\n\n- `TypeError`\n  - : The import map definition is not a JSON object, the `importmap` key is defined but its value is not a JSON object, or the `scopes` key is defined but its value is not a JSON object.\n\nBrowsers generate console warnings for other cases where the import map JSON does not conform to the [import map](#import_map_json_representation) schema.\n\n## Description\n\nWhen importing a [JavaScript module](/blog/Web/JavaScript/Guide/Modules), both the [`import` statement](/blog/Web/JavaScript/Reference/Statements/import) and [`import()` operator](/blog/Web/JavaScript/Reference/Operators/import) have a \"module specifier\" that indicates the module to be imported.\nA browser must be able to resolve this specifier to an absolute URL in order to import the module.\n\nFor example, the following statements import elements from the module specifier `\"https://example.com/shapes/circle.js\"`, which is an absolute URL, and the module specifier `\"./modules/shapes/square.js\"`, which is a path relative to the base URL of the document.\n\n```js\nimport { name as circleName } from \"https://example.com/shapes/circle.js\";\nimport { name as squareName, draw } from \"./modules/shapes/square.js\";\n```\n\nImport maps allow developers to specify (almost) any text they want in the module specifier; the map provides a corresponding value that will replace the text when the module specifier is resolved.\n\n### Bare modules\n\nThe import map below defines an `imports` key that has a \"module specifier map\" with properties `circle` and `square`.\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"circle\": \"https://example.com/shapes/circle.js\",\n      \"square\": \"./modules/shapes/square.js\"\n    }\n  }\n</script>\n```\n\nWith this import map we can import the same modules as above, but using \"bare modules\" in our module specifiers:\n\n```js\nimport { name as circleName } from \"circle\";\nimport { name as squareName, draw } from \"square\";\n```\n\n### Mapping path prefixes\n\nA module specifier map key can also be used to remap a path prefix in a module specifier.\nNote that in this case the property and mapped path must both have a trailing forward slash (`/`).\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"shapes/\": \"./modules/shapes/\",\n      \"other-shapes/\": \"https://example.com/modules/shapes/\"\n    }\n  }\n</script>\n```\n\nWe could then import a circle module as shown.\n\n```js\nimport { name as circleName } from \"shapes/circle.js\";\n```\n\n### Paths in the module specifier map key\n\nModule specifier keys do not have to be single word names (\"bare names\").\nThey can also contain or end with path separators, or be absolute URLs, or be relative URL paths that start with `/`, `./`, or `../`.\n\n```json\n{\n  \"imports\": {\n    \"modules/shapes/\": \"./modules/src/shapes/\",\n    \"modules/square\": \"./modules/src/other/shapes/square.js\",\n    \"https://example.com/modules/square.js\": \"./modules/src/other/shapes/square.js\",\n    \"../modules/shapes/\": \"/modules/shapes/\"\n  }\n}\n```\n\nIf there are several module specifier keys in a module specifier map that might match, then the most specific key will be selected (i.e., the one with the longer path/value).\n\nA module specifier of `./foo/../js/app.js` would be resolved to `./js/app.js` before matching.\nThis means that a module specifier key of `./js/app.js` would match the module specifier even though they are not exactly the same.\n\n### Scoped module specifier maps\n\nYou can use the `scopes` key to provide mappings that are only used if the script importing the module contains a particular URL path.\nIf the URL of the loading script matches the supplied path, the mapping associated with the scope will be used.\nThis allows different versions of the module to be used depending on what code is doing the importing.\n\nFor example, the map below will only use the scoped map if the loading module has a URL that includes the path: \"/modules/custom-shapes/\".\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"square\": \"./modules/shapes/square.js\"\n    },\n    \"scopes\": {\n      \"/modules/custom-shapes/\": {\n        \"square\": \"https://example.com/modules/shapes/square.js\"\n      }\n    }\n  }\n</script>\n```\n\nIf multiple scopes match the referrer URL, then the most specific scope path is used (the scope key name with the longest name).\nThe browser falls back to the next most specific scoped path if there is no matching specifier, and so on, eventually falling back to the module specifier map in the `imports` key.\n\n### Integrity metadata map\n\nYou can use the `integrity` key to provide mapping for module [integrity metadata](/blog/Web/Security/Subresource_Integrity#using_subresource_integrity).\nThis enables you to ensure the integrity of dynamically or statically imported modules.\n`integrity` also enables you to provide a fallback for top-level or preloaded modules, in case they don't already include an `integrity` attribute.\n\nThe map keys represent module URLs, which can be absolute or relative (starting with `/`, `./`, or `../`).\nThe map values represent integrity metadata, identical to that used in [`integrity`](/blog/Web/HTML/Reference/Elements/script#integrity) attribute values.\n\nFor example, the map below defines integrity metadata for the `square.js` module (directly) and its bare specifier (transitively, via the `imports` key).\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"square\": \"./modules/shapes/square.js\"\n    },\n    \"integrity\": {\n      \"./modules/shapes/square.js\": \"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC\"\n    }\n  }\n</script>\n```\n\n### Merging multiple import maps\n\nInternally, browsers maintain a single global import map representation. When multiple import maps are included in a document, their contents are merged into the global import map when they are registered.\n\nFor example, consider the following two import maps:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/\": \"./original-app/\"\n    }\n  }\n</script>\n```\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/helper\": \"./helper/index.mjs\"\n    },\n    \"scopes\": {\n      \"/js\": {\n        \"/app/\": \"./js-app/\"\n      }\n    }\n  }\n</script>\n```\n\nThese are equivalent to the following single import map:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/\": \"./original-app/\",\n      \"/app/helper\": \"./helper/index.mjs\"\n    },\n    \"scopes\": {\n      \"/js\": {\n        \"/app/\": \"./js-app/\"\n      }\n    }\n  }\n</script>\n```\n\nModule specifiers in each registered map that were already resolved beforehand are dropped. Subsequent resolutions of these specifiers will provide the same results as their previous resolutions.\n\nFor example, if the module specifier `/app/helper.js` was already resolved, the following new import map:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/helper.js\": \"./helper/index.mjs\",\n      \"lodash\": \"/node_modules/lodash-es/lodash.js\"\n    }\n  }\n</script>\n```\n\nWould be equivalent to:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"lodash\": \"/node_modules/lodash-es/lodash.js\"\n    }\n  }\n</script>\n```\n\nThe `/app/helper.js` rule was ignored and not incorporated into the map.\n\nSimilarly, module specifiers in a registered map that were already mapped to URLs in the global map are dropped; their previous mapping prevails.\n\nFor example, the following two import maps:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/helper\": \"./helper/index.mjs\",\n      \"lodash\": \"/node_modules/lodash-es/lodash.js\"\n    }\n  }\n</script>\n```\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/helper\": \"./main/helper/index.mjs\"\n    }\n  }\n</script>\n```\n\nAre equivalent to the following single import map:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"/app/helper\": \"./helper/index.mjs\",\n      \"lodash\": \"/node_modules/lodash-es/lodash.js\"\n    }\n  }\n</script>\n```\n\nThe `/app/helper/` rule was dropped from the second map.\n\n> [!NOTE]\n> In non-supporting browsers (check the [compatibility data](#browser_compatibility)), a [polyfill](https://github.com/guybedford/es-module-shims) can be used to avoid issues related to module resolution.\n\n## Import map JSON representation\n\nThe following is a \"formal\" definition of the import map JSON representation.\n\nThe import map must be a valid JSON object that can define any of the optional keys `imports`, `scopes` and `integrity`. Each key's value must be an object, which may be empty.\n\n- `imports` {{optional_inline}}\n\n  - : The value is a [module specifier map](#module_specifier_map), which provides the mappings between module specifier text that might appear in an `import` statement or `import()` operator, and the text that will replace it when the specifier is resolved.\n\n    This is the fallback map that is searched for matching module specifiers if no `scopes` path URLs match, or if module specifier maps in matching `scopes` paths do not contain a key that matches the module specifier.\n\n    - `<module specifier map>`\n\n      - : A \"module specifier map\" is a valid JSON object where the _keys_ are text that may be present in the module specifier when importing a module, and the corresponding _values_ are the URLs or paths that will replace this text when the module specifier is resolved to an address.\n\n        The module specifier map JSON object has the following requirements:\n\n        - None of the keys may be empty.\n        - All of the values must be strings, defining either a valid absolute URL or a valid URL string that starts with `/`, `./`, or `../`.\n        - If a key ends with `/`, then the corresponding value must also end with `/`.\n          A key with a trailing `/` can be used as a prefix for when mapping (or remapping) modules addresses.\n        - The object properties' ordering is irrelevant: if multiple keys can match the module specifier, the most specific key is used (in other words, a specifier \"olive/branch/\" would match before \"olive/\").\n\n- `integrity` {{optional_inline}}\n\n  - : Defines a valid JSON object where the _keys_ are strings containing valid absolute or relative URLs (starting with `/`, `./`, or `../`),\n    and the corresponding _values_ are valid [integrity metadata](/blog/Web/Security/Subresource_Integrity#using_subresource_integrity).\n\n    If the URL of a script importing or preloading a module matches a key in the `integrity` object, the corresponding integrity metadata is applied to the script's fetch options,\n    unless they already have integrity metadata attached to them.\n\n- `scopes` {{optional_inline}}\n\n  - : Scopes define path-specific [module specifier maps](#module_specifier_map), allowing the choice of map to depend on the path of the code importing the module.\n\n    The scopes object is a valid JSON object where each property is a `<scope key>`, which is an URL path, with a corresponding value that is a `<module specifier map>`.\n\n    If the URL of a script importing a module matches a `<scope key>` path, then the `<module specifier map>` value associated with the key is checked for matching specifiers first.\n    If there are multiple matching scope keys, then the value associated with the most specific/nested scope paths are checked for matching module specifiers first.\n    The fallback module specifier map in `imports` is used if there are no matching module specifier keys in any of the matching scoped module specifier maps.\n\n    Note that the scope does not change how an address is resolved; relative addresses are always resolved to the import map base URL.\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [JavaScript modules > Importing modules using import maps](/blog/Web/JavaScript/Guide/Modules#importing_modules_using_import_maps)\n- [The `type` attribute of HTML `<script>` elements](/blog/Web/HTML/Reference/Elements/script/type)\n- [`import` statement](/blog/Web/JavaScript/Reference/Statements/import)\n- [`import()` operator](/blog/Web/JavaScript/Reference/Operators/import)\n","slug":"2ba51135188545bfac9442862cd8317f","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:06:14.583Z","dateupdated":"2025-07-05T19:06:14.583Z","layout":"PostBanner"}