{"title":"Reset","tag":"html/reference/elements/input/reset","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\n{{HTMLElement(\"input\")}} elements of type **`reset`** are rendered as buttons, with a default {{domxref(\"Element/click_event\", \"click\")}} event handler that resets all inputs in the form to their initial values.\n\n{{InteractiveExample(\"HTML Demo: &lt;input type=&quot;reset&quot;&gt;\", \"tabbed-standard\")}}\n\n```html interactive-example\n<form>\n  <div class=\"controls\">\n    <label for=\"id\">User ID:</label>\n    <input type=\"text\" id=\"id\" name=\"id\" />\n\n    <input type=\"reset\" value=\"Reset\" />\n    <input type=\"submit\" value=\"Submit\" />\n  </div>\n</form>\n```\n\n```css interactive-example\n.controls {\n  padding-top: 1rem;\n  display: grid;\n  grid-template-rows: repeat(3, 1fr);\n  grid-template-columns: 1fr 2fr;\n  gap: 0.7rem;\n}\n\nlabel {\n  font-size: 0.8rem;\n  justify-self: end;\n}\n\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  width: 5rem;\n  justify-self: end;\n}\n\ninput[type=\"reset\"] {\n  grid-column: 2;\n  grid-row: 2;\n}\n\ninput[type=\"submit\"] {\n  grid-column: 2;\n  grid-row: 3;\n}\n```\n\n> [!NOTE]\n> You should usually avoid including reset buttons in your forms. They're rarely useful, and are instead more likely to frustrate users who click them by mistake (often while trying to click the [submit button](/blog/Web/HTML/Reference/Elements/input/submit)).\n\n## Value\n\nAn `<input type=\"reset\">` element's [`value`](/blog/Web/HTML/Reference/Elements/input#value) attribute contains a string that is used as the button's label providing the button with an {{glossary(\"accessible description\")}}. Buttons such as `reset` don't have a value otherwise.\n\n### Setting the value attribute\n\n```html\n<input type=\"reset\" value=\"Reset the form\" />\n```\n\n{{EmbedLiveSample(\"Setting_the_value_attribute\", 650, 30)}}\n\n### Omitting the value attribute\n\nIf you don't specify a `value`, you get a button with the default label (typically \"Reset,\" but this will vary depending on the {{Glossary(\"user agent\")}}):\n\n```html\n<input type=\"reset\" />\n```\n\n{{EmbedLiveSample(\"Omitting_the_value_attribute\", 650, 30)}}\n\n## Using reset buttons\n\n`<input type=\"reset\">` buttons are used to reset forms. If you want to create a custom button and then customize the behavior using JavaScript, you need to use [`<input type=\"button\">`](/blog/Web/HTML/Reference/Elements/input/button), or better still, a {{htmlelement(\"button\")}} element.\n\n### A basic reset button\n\nWe'll begin by creating a basic reset button:\n\n```html\n<form>\n  <div>\n    <label for=\"example\">Type in some sample text</label>\n    <input id=\"example\" type=\"text\" />\n  </div>\n  <div>\n    <input type=\"reset\" value=\"Reset the form\" />\n  </div>\n</form>\n```\n\nThis renders like so:\n\n{{EmbedLiveSample(\"A_basic_reset_button\", 650, 100)}}\n\nTry entering some text into the text field, and then pressing the reset button.\n\n### Adding a reset keyboard shortcut\n\nTo add a keyboard shortcut to a reset button — just as you would with any {{HTMLElement(\"input\")}} for which it makes sense — you use the [`accesskey`](/blog/Web/HTML/Reference/Global_attributes/accesskey) global attribute.\n\nIn this example, <kbd>r</kbd> is specified as the access key (you'll need to press <kbd>r</kbd> plus the particular modifier keys for your browser/OS combination; see [`accesskey`](/blog/Web/HTML/Reference/Global_attributes/accesskey) for a useful list of those).\n\n```html\n<form>\n  <div>\n    <label for=\"example\">Type in some sample text</label>\n    <input id=\"example\" type=\"text\" />\n  </div>\n  <div>\n    <input type=\"reset\" value=\"Reset the form\" accesskey=\"r\" />\n  </div>\n</form>\n```\n\n{{EmbedLiveSample(\"Adding_a_reset_keyboard_shortcut\", 650, 100)}}\n\nThe problem with the above example is that there's no way for the user to know what the access key is! This is especially true since the modifiers are typically non-standard to avoid conflicts. When building a site, be sure to provide this information in a way that doesn't interfere with the site design (for example by providing an easily accessible link that points to information on what the site access keys are). Adding a tooltip to the button (using the [`title`](/blog/Web/HTML/Reference/Global_attributes/title) attribute) can also help, although it's not a complete solution for accessibility purposes.\n\n### Disabling and enabling a reset button\n\nTo disable a reset button, specify the [`disabled`](/blog/Web/HTML/Reference/Elements/input#disabled) attribute on it, like so:\n\n```html\n<input type=\"reset\" value=\"Disabled\" disabled />\n```\n\nYou can enable and disable buttons at run time by setting `disabled` to `true` or `false`; in JavaScript this looks like `btn.disabled = true` or `btn.disabled = false`.\n\n> [!NOTE]\n> See the [`<input type=\"button\">`](/blog/Web/HTML/Reference/Elements/input/button#disabling_and_enabling_a_button) page for more ideas about enabling and disabling buttons.\n\n## Validation\n\nButtons don't participate in constraint validation; they have no real value to be constrained.\n\n## Examples\n\nWe've included basic examples above. There isn't really anything more to say about reset buttons.\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <td><strong><a href=\"#value\">Value</a></strong></td>\n      <td>A string used as the button's label</td>\n    </tr>\n    <tr>\n      <td><strong>Events</strong></td>\n      <td>{{domxref(\"Element/click_event\", \"click\")}}</td>\n    </tr>\n    <tr>\n      <td><strong>Supported common attributes</strong></td>\n      <td>\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#type\"><code>type</code></a> and\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#value\"><code>value</code></a>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>IDL attributes</strong></td>\n      <td><code>value</code></td>\n    </tr>\n    <tr>\n      <td><strong>DOM interface</strong></td>\n      <td><p>{{domxref(\"HTMLInputElement\")}}</p></td>\n    </tr>\n    <tr>\n      <td><strong>Methods</strong></td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td><strong>Implicit ARIA Role</strong></td>\n      <td><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/button_role\"><code>button</code></a></td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{HTMLElement(\"input\")}} and the {{domxref(\"HTMLInputElement\")}} interface which implements it.\n- [Forms and buttons](/blog/Learn_web_development/Extensions/Forms/Basic_native_form_controls#actual_buttons)\n- [HTML forms](/blog/Learn_web_development/Extensions/Forms)\n- The {{HTMLElement(\"button\")}} element\n","slug":"90c9d73d0aa04e54919020d84efffd31","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:05:37.069Z","dateupdated":"2025-07-05T19:05:37.069Z","layout":"PostBanner"}