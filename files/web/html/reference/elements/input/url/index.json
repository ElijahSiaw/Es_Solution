{"title":"Url","tag":"html/reference/elements/input/url","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\n{{HTMLElement(\"input\")}} elements of type **`url`** are used to let the user enter and edit a URL.\n\n{{InteractiveExample(\"HTML Demo: &lt;input type=&quot;url&quot;&gt;\", \"tabbed-shorter\")}}\n\n```html interactive-example\n<form>\n  <label for=\"url\">Enter an https:// URL:</label>\n  <input\n    type=\"url\"\n    name=\"url\"\n    id=\"url\"\n    placeholder=\"https://example.com\"\n    pattern=\"https://.*\"\n    size=\"30\"\n    required />\n</form>\n```\n\n```css interactive-example\nlabel {\n  display: block;\n  font:\n    1rem \"Fira Sans\",\n    sans-serif;\n}\n\ninput,\nlabel {\n  margin: 0.4rem 0;\n}\n```\n\nThe input value is automatically validated to ensure that it's either empty or a properly-formatted URL before the form can be submitted. The {{cssxref(\":valid\")}} and {{cssxref(\":invalid\")}} CSS pseudo-classes are automatically applied as appropriate to visually denote whether the current value of the field is a valid URL or not.\n\n## Value\n\nThe {{HTMLElement(\"input\")}} element's [`value`](/blog/Web/HTML/Reference/Elements/input#value) attribute contains a string that is automatically validated as conforming to URL syntax. More specifically, there are two possible value formats that will pass validation:\n\n1. An empty string (\"\") indicates the user did not enter a value or that the value was removed.\n2. A single properly-formed absolute URL. This doesn't necessarily mean the URL address exists, but it is at least formatted correctly. An entry matching `urlscheme://rest-of-url` can be valid, even if the `urlscheme` entered doesn't exist.\n\nSee [Validation](#validation) for details on how URLs are validated to ensure that they're formatted properly.\n\n## Additional attributes\n\nIn addition to the [global attributes](/blog/Web/HTML/Reference/Global_attributes), and the attributes that operate on all {{HTMLElement(\"input\")}} elements regardless of their type, `url` inputs support the following attributes.\n\n> [!NOTE]\n> The [`autocorrect`](/blog/Web/HTML/Reference/Global_attributes/autocorrect) global attribute can be added to url inputs, but the stored state is always `off`.\n\n### list\n\nThe values of the list attribute is the {{domxref(\"Element.id\", \"id\")}} of a {{HTMLElement(\"datalist\")}} element located in the same document. The {{HTMLElement(\"datalist\")}} provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the [`type`](/blog/Web/HTML/Reference/Elements/input#type) are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.\n\n### maxlength\n\nThe maximum string length (measured in UTF-16 code units) that the user can enter into the `url` input. This must be an integer value of `0` or higher. If no `maxlength` is specified, or an invalid value is specified, the `url` input has no maximum length. This value must also be greater than or equal to the value of `minlength`.\n\nThe input will fail [constraint validation](/blog/Web/HTML/Guides/Constraint_validation) if the length of the text value of the field is greater than `maxlength` UTF-16 code units long. Constraint validation is only applied when the value is changed by the user.\n\n### minlength\n\nThe minimum string length (measured in UTF-16 code units) that the user can enter into the `url` input. This must be a non-negative integer value smaller than or equal to the value specified by `maxlength`. If no `minlength` is specified, or an invalid value is specified, the `url` input has no minimum length.\n\nThe input will fail [constraint validation](/blog/Web/HTML/Guides/Constraint_validation) if the length of the text entered into the field is fewer than `minlength` UTF-16 code units long. Constraint validation is only applied when the value is changed by the user.\n\n### pattern\n\nThe `pattern` attribute, when specified, is a regular expression that the input's [`value`](/blog/Web/HTML/Reference/Elements/input#value) must match for the value to pass [constraint validation](/blog/Web/HTML/Guides/Constraint_validation). It must be a valid JavaScript regular expression, as used by the {{jsxref(\"RegExp\")}} type, and as documented in our [guide on regular expressions](/blog/Web/JavaScript/Guide/Regular_expressions); the `'u'` flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as {{Glossary(\"ASCII\")}}. No forward slashes should be specified around the pattern text.\n\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n\n> [!NOTE]\n> Use the [`title`](/blog/Web/HTML/Reference/Elements/input#title) attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby.\n\nSee the section [Pattern validation](#pattern_validation) for details and an example.\n\n### placeholder\n\nThe `placeholder` attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text _must not_ include carriage returns or line feeds.\n\nIf the control's content has one directionality ({{Glossary(\"LTR\")}} or {{Glossary(\"RTL\")}}) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see [How to use Unicode controls for bidi text](https://www.w3.org/International/questions/qa-bidi-unicode-controls) for more information.\n\n> [!NOTE]\n> Avoid using the `placeholder` attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See [`<input>` labels](/blog/Web/HTML/Reference/Elements/input#labels) for more information.\n\n### readonly\n\nThe [`readonly`](/blog/Web/HTML/Reference/Attributes/readonly) Boolean attribute, if present, means this field cannot be edited by the user. Its `value` can, however, still be changed by JavaScript code directly setting the {{domxref(\"HTMLInputElement\")}} `value` property.\n\n> [!NOTE]\n> Because a read-only field cannot have a value, [`required`](/blog/Web/HTML/Reference/Attributes/required) does not have any effect on inputs with the `readonly` attribute also specified.\n\n### size\n\nThe `size` attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ({{cssxref(\"font\")}} settings in use).\n\nThis does _not_ set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the [`maxlength`](#maxlength) attribute.\n\n### spellcheck\n\nThe [`spellcheck`](/blog/Web/HTML/Reference/Global_attributes/spellcheck) global attribute is used to indicate whether to enable spell-checking for an element. It can be used on any editable content, but here we consider specifics related to the use of `spellcheck` on {{HTMLElement(\"input\")}} elements. The permitted values for `spellcheck` are:\n\n- `false`\n  - : Disable spell-checking for this element.\n- `true`\n  - : Enable spell-checking for this element.\n- \"\" (empty string) or no value\n  - : Follow the element's default behavior for spell-checking. This may be based upon a parent's `spellcheck` setting or other factors.\n\nAn input field can have spell-checking enabled if it doesn't have the [readonly](#readonly) attribute set and is not disabled.\n\nThe value returned by reading `spellcheck` may not reflect the actual state of spell-checking within a control if the {{Glossary(\"user agent\", \"user agent's\")}} preferences override the setting.\n\n## Using URL inputs\n\nWhen you create a URL input with the proper `type` value, `url`, you get automatic validation that the entered text is at least in the correct form to potentially be a legitimate URL. This can help avoid cases in which the user mistypes their website's address, or provides an invalid one.\n\nIt's important, however, to note that this is not enough to ensure that the specified text is a URL which actually exists, corresponds to the user of the site, or is acceptable in any other way. It ensures that the value of the field is properly formatted to be a URL.\n\n> [!NOTE]\n> A user can tinker with your HTML behind the scenes, so your site _must not_ use this validation for any security purposes. You _must_ verify the URL on the server-side of any transaction in which the provided text may have any security implications of any kind.\n\n### A basic URL input\n\nThis element is implemented as a standard text input field with basic validation features. In its most basic form, a URL input can be implemented like this:\n\n```html\n<input id=\"myURL\" name=\"myURL\" type=\"url\" />\n```\n\n{{ EmbedLiveSample('A_basic_URL_input', 600, 40) }}\n\nNotice that it's considered valid when empty and when a single validly-formatted URL address is entered, but is otherwise not considered valid. By adding the [`required`](/blog/Web/HTML/Reference/Elements/input#required) attribute, only properly-formed URLs are allowed; the input is no longer considered valid when empty.\n\nThere is nothing magical going on here. Submitting this form would cause the following data to be sent to the server: `myURL=http%3A%2F%2Fwww.example.com`. Note how characters are escaped as necessary.\n\n### Placeholders\n\nSometimes it's helpful to offer an in-context hint as to what form the input data should take. This can be especially important if the page design doesn't offer descriptive labels for each {{HTMLElement(\"input\")}}. This is where **placeholders** come in. A placeholder is a value that demonstrates the form the `value` should take by presenting an example of a valid value, which is displayed inside the edit box when the element's `value` is \"\". Once data is entered into the box, the placeholder disappears; if the box is emptied, the placeholder reappears.\n\nHere, we have a `url` input with the placeholder `http://www.example.com`. Note how the placeholder disappears and reappears as you manipulate the contents of the edit field.\n\n```html\n<input\n  id=\"myURL\"\n  name=\"myURL\"\n  type=\"url\"\n  placeholder=\"http://www.example.com\" />\n```\n\n{{ EmbedLiveSample('Placeholders', 600, 40) }}\n\n### Controlling the input size\n\nYou can control both the physical length of the input box and the minimum and maximum lengths allowed for the input text.\n\n#### Physical input element size\n\nThe physical size of the input box can be controlled using the [`size`](/blog/Web/HTML/Reference/Elements/input#size) attribute. With it, you can specify the number of characters the input box can display at a time. In this example, for instance, the `url` edit box is 30 characters wide:\n\n```html\n<input id=\"myURL\" name=\"myURL\" type=\"url\" size=\"30\" />\n```\n\n{{ EmbedLiveSample('Physical_input_element_size', 600, 40) }}\n\n#### Element value length\n\nThe `size` is separate from the length limitation on the entered URL itself. You can specify a minimum length, in characters, for the entered URL using the [`minlength`](/blog/Web/HTML/Reference/Elements/input#minlength) attribute; similarly, use [`maxlength`](/blog/Web/HTML/Reference/Elements/input#maxlength) to set the maximum length of the entered URL. If `maxLength` exceeds `size`, the input box's contents will scroll as needed to show the current selection or insertion point as the content is manipulated.\n\nThe example below creates a 30-character wide URL address entry box, requiring that the contents be no shorter than 10 characters and no longer than 80 characters.\n\n```html\n<input\n  id=\"myURL\"\n  name=\"myURL\"\n  type=\"url\"\n  size=\"30\"\n  minlength=\"10\"\n  maxlength=\"80\" />\n```\n\n{{EmbedLiveSample(\"Element_value_length\", 600, 40) }}\n\n> [!NOTE]\n> These attributes also affect validation; a value shorter or longer than the specified minimum/maximum lengths will be classified as invalid; in addition most browsers will refuse to let the user enter a value longer than the specified maximum length.\n\n### Providing default options\n\n#### Providing a single default using the value attribute\n\nAs always, you can provide a default value for a `url` input box by setting its [`value`](/blog/Web/HTML/Reference/Elements/input#value) attribute:\n\n```html\n<input id=\"myURL\" name=\"myURL\" type=\"url\" value=\"http://www.example.com\" />\n```\n\n{{EmbedLiveSample(\"Providing_a_single_default_using_the_value_attribute\", 600, 40)}}\n\n#### Offering suggested values\n\nTaking it a step further, you can provide a list of default options from which the user can select by specifying the [`list`](/blog/Web/HTML/Reference/Elements/input#list) attribute. This doesn't limit the user to those options, but does allow them to select commonly-used URLs more quickly. This also offers hints to [`autocomplete`](/blog/Web/HTML/Reference/Elements/input#autocomplete). The `list` attribute specifies the ID of a {{HTMLElement(\"datalist\")}}, which in turn contains one {{HTMLElement(\"option\")}} element per suggested value; each `option`'s `value` is the corresponding suggested value for the URL entry box.\n\n```html\n<input id=\"myURL\" name=\"myURL\" type=\"url\" list=\"defaultURLs\" />\n\n<datalist id=\"defaultURLs\">\n  <option value=\"https://developer.mozilla.org/\"></option>\n  <option value=\"http://www.google.com/\"></option>\n  <option value=\"http://www.microsoft.com/\"></option>\n  <option value=\"https://www.mozilla.org/\"></option>\n  <option value=\"http://w3.org/\"></option>\n</datalist>\n```\n\n{{EmbedLiveSample(\"Offering_suggested_values\", 600, 40)}}\n\nWith the {{HTMLElement(\"datalist\")}} element and its {{HTMLElement(\"option\")}}s in place, the browser will offer the specified values as potential values for the URL; this is typically presented as a popup or drop-down menu containing the suggestions. While the specific user experience may vary from one browser to another, typically clicking in the edit box presents a drop-down of the suggested URLs. Then, as the user types, the list is adjusted to show only matching values. Each typed character narrows down the list until the user makes a selection or types a custom value.\n\n#### Using labels for suggested values\n\nYou can opt to include the [`label`](/blog/Web/HTML/Reference/Elements/option#label) attribute on one or all of your `<option>` elements to provide textual labels. Some browsers may display only the labels, while others may display both the label and the URL.\n\n```html\n<input id=\"myURL\" name=\"myURL\" type=\"url\" list=\"defaultURLs\" />\n\n<datalist id=\"defaultURLs\">\n  <option value=\"https://developer.mozilla.org/\" label=\"Es Solution Web Docs\"></option>\n  <option value=\"http://www.google.com/\" label=\"Google\"></option>\n  <option value=\"http://www.microsoft.com/\" label=\"Microsoft\"></option>\n  <option value=\"https://www.mozilla.org/\" label=\"Mozilla\"></option>\n  <option value=\"http://w3.org/\" label=\"W3C\"></option>\n</datalist>\n```\n\n{{EmbedLiveSample(\"Using_labels_for_suggested_values\", 600, 40)}}\n\n## Validation\n\nThere are two levels of content validation available for `url` inputs. First, there's the standard level of validation offered to all {{HTMLElement(\"input\")}}s, which automatically ensures that the contents meet the requirements to be a valid URL. But there's also the option to add additional filtering to ensure that your own specialized needs are met, if you have any.\n\n> [!WARNING]\n> HTML form validation is _not_ a substitute for scripts that ensure that the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database.\n\n### Basic validation\n\nBrowsers that support the `url` input type automatically provide validation to ensure that only text that matches the standard format for URLs is entered into the input box.\n\nThe syntax of a URL is fairly intricate. It's defined by WHATWG's [URL Living Standard](https://url.spec.whatwg.org/) and is described for newcomers in our article [What is a URL?](/blog/Learn_web_development/Howto/Web_mechanics/What_is_a_URL)\n\n### Making a URL required\n\nAs mentioned earlier, to make a URL entry required before the form can be submitted (you can't leave the field blank), you just need to include the [`required`](/blog/Web/HTML/Reference/Elements/input#required) attribute on the input.\n\n### Pattern validation\n\nIf you need the entered URL to be restricted further than just \"any string that looks like a URL,\" you can use the [`pattern`](/blog/Web/HTML/Reference/Elements/input#pattern) attribute to specify a {{Glossary(\"regular expression\")}} the value must match for the value to be valid.\n\n## Examples\n\n### URL validation\n\nIn this example, we make sure that a URL is filled in using the [`required`](/blog/Web/HTML/Reference/Elements/input#required) attribute and that the URL is something on `mozilla.org` using the [`pattern`](/blog/Web/HTML/Reference/Elements/input#pattern) attribute for illustration.\n\n#### HTML\n\nIn the `url` input, we set `pattern` to `\".*\\.mozilla\\.org.*\"`. This regular expression validates a string that has any number of characters, followed by \".mozilla.org\", followed by any number of characters. Because the browser runs both the standard URL filter _and_ our custom pattern against the specified text, we wind up with a validation that says \"make sure this is a valid URL, and also contains `.mozilla.org`.\"\n\nNote that a strict pattern like `https://developer\\.mozilla\\.org.*` would be more robust, but that would make the `type=\"url\"` attribute redundant in this case.\n\nThe [`title`](/blog/Web/HTML/Reference/Global_attributes/title) attribute also describes the `pattern` for users with assistive technologies.\n\n```html live-sample___url-validation\n<form>\n  <label for=\"myURL\">\n    Enter a url from this site:\n    <input\n      id=\"myURL\"\n      name=\"myURL\"\n      type=\"url\"\n      required\n      pattern=\".*\\.mozilla\\.org.*\"\n      title=\"URL should include mozilla.org\" />\n    <span class=\"validity\"></span>\n  </label>\n  <button>Submit</button>\n</form>\n```\n\n#### CSS\n\nThe CSS gives visual clues to show the user if the content is {{cssxref(\":valid\")}} or {{cssxref(\":invalid\")}} by adding an appropriate {{cssxref(\"content\")}} property and includes [alternative text](/blog/Web/CSS/content#alternative_text_string_counter) for users with assistive technologies.\n\n```css live-sample___url-validation\ninput:focus:invalid {\n  outline: 2px solid red;\n}\n\ninput:focus:valid {\n  outline: 2px solid green;\n}\n\ninput + span {\n  padding: 0 0.3rem;\n}\n\ninput:invalid + span:after {\n  content: \"✖\" / \"Content is not valid\";\n  color: red;\n}\n\ninput:valid + span:after {\n  content: \"✓\" / \"Content is valid\";\n  color: green;\n}\n```\n\n#### Result\n\nCopy this page's url and paste it in the input field and you will see a green outline and green tick. Enter any other URL that doesn't contain **mozilla.org** or an invalid URL and you will see a red outline and red cross.\n\n{{EmbedLiveSample(\"url-validation\", \"40px\", , , , , \"allow-forms\")}}\n\nCheck the [Pattern validation](#pattern_validation) and [Using URL inputs](#using_url_inputs) sections for other examples.\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <td><strong><a href=\"#value\">Value</a></strong></td>\n      <td>A string representing a URL, or empty</td>\n    </tr>\n    <tr>\n      <td><strong>Events</strong></td>\n      <td>\n        {{domxref(\"HTMLElement/change_event\", \"change\")}} and\n        {{domxref(\"Element/input_event\", \"input\")}}\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Supported Common Attributes</strong></td>\n      <td>\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#autocomplete\"><code>autocomplete</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#list\"><code>list</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#maxlength\"><code>maxlength</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#minlength\"><code>minlength</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#pattern\"><code>pattern</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#placeholder\"><code>placeholder</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#readonly\"><code>readonly</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#required\"><code>required</code></a> and\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#size\"><code>size</code></a>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>IDL attributes</strong></td>\n      <td>\n        <code>list</code>, <code>value</code>, <code>selectionEnd</code>,\n        <code>selectionDirection</code>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>DOM interface</strong></td>\n      <td><p>{{domxref(\"HTMLInputElement\")}}</p></td>\n    </tr>\n    <tr>\n      <td><strong>Methods</strong></td>\n      <td>\n        {{domxref(\"HTMLInputElement.select\", \"select()\")}},\n        {{domxref(\"HTMLInputElement.setRangeText\", \"setRangeText()\")}}\n        and\n        {{domxref(\"HTMLInputElement.setSelectionRange\", \"setSelectionRange()\")}}.\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Implicit ARIA Role</strong></td>\n      <td>with no <code>list</code> attribute:\n                <code><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/textbox_role\">textbox</a></code></td>\n      <td>with <code>list</code> attribute: <code><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/combobox_role\">combobox</a></code></td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [HTML forms guide](/blog/Learn_web_development/Extensions/Forms)\n- {{HTMLElement(\"input\")}}\n- [`<input type=\"tel\">`](/blog/Web/HTML/Reference/Elements/input/tel)\n- [`<input type=\"email\">`](/blog/Web/HTML/Reference/Elements/input/email)\n","slug":"8c4d2f9c51dc4dcab7b7393e5092c34a","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:05:38.269Z","dateupdated":"2025-07-05T19:05:38.269Z","layout":"PostBanner"}