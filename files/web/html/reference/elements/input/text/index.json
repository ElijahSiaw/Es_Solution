{"title":"Text","tag":"html/reference/elements/input/text","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\n{{HTMLElement(\"input\")}} elements of type **`text`** create basic single-line text fields.\n\n{{InteractiveExample(\"HTML Demo: &lt;input type=&quot;text&quot;&gt;\", \"tabbed-shorter\")}}\n\n```html interactive-example\n<label for=\"name\">Name (4 to 8 characters):</label>\n\n<input\n  type=\"text\"\n  id=\"name\"\n  name=\"name\"\n  required\n  minlength=\"4\"\n  maxlength=\"8\"\n  size=\"10\" />\n```\n\n```css interactive-example\nlabel {\n  display: block;\n  font:\n    1rem \"Fira Sans\",\n    sans-serif;\n}\n\ninput,\nlabel {\n  margin: 0.4rem 0;\n}\n```\n\n## Value\n\nThe [`value`](/blog/Web/HTML/Reference/Elements/input#value) attribute is a string that contains the current value of the text entered into the text field. You can retrieve this using the {{domxref(\"HTMLInputElement\")}} `value` property in JavaScript.\n\n```js\nlet theText = myTextInput.value;\n```\n\nIf no validation constraints are in place for the input (see [Validation](#validation) for more details), the value may be an empty string (`\"\"`).\n\n## Additional attributes\n\nIn addition to the [global attributes](/blog/Web/HTML/Reference/Global_attributes) and the attributes that operate on all {{HTMLElement(\"input\")}} elements regardless of their type, text inputs support the following attributes.\n\n### `list`\n\nThe values of the list attribute is the {{domxref(\"Element.id\", \"id\")}} of a {{HTMLElement(\"datalist\")}} element located in the same document. The {{HTMLElement(\"datalist\")}} provides a list of predefined values to suggest to the user for this input. Any values in the list that are not compatible with the [`type`](/blog/Web/HTML/Reference/Elements/input#type) are not included in the suggested options. The values provided are suggestions, not requirements: users can select from this predefined list or provide a different value.\n\n### `maxlength`\n\nThe maximum string length (measured in UTF-16 code units) that the user can enter into the `text` input. This must be an integer value of 0 or higher. If no `maxlength` is specified, or an invalid value is specified, the `text` input has no maximum length. This value must also be greater than or equal to the value of `minlength`.\n\nThe input will fail [constraint validation](/blog/Web/HTML/Guides/Constraint_validation) if the length of the text value of the field is greater than `maxlength` UTF-16 code units long. Constraint validation is only applied when the value is changed by the user.\n\n### `minlength`\n\nThe minimum string length (measured in UTF-16 code units) that the user can enter into the `text` input. This must be a non-negative integer value smaller than or equal to the value specified by `maxlength`. If no `minlength` is specified, or an invalid value is specified, the `text` input has no minimum length.\n\nThe input will fail [constraint validation](/blog/Web/HTML/Guides/Constraint_validation) if the length of the text entered into the field is fewer than `minlength` UTF-16 code units long. Constraint validation is only applied when the value is changed by the user.\n\n### `pattern`\n\nThe `pattern` attribute, when specified, is a regular expression that the input's [`value`](/blog/Web/HTML/Reference/Elements/input#value) must match for the value to pass [constraint validation](/blog/Web/HTML/Guides/Constraint_validation). It must be a valid JavaScript regular expression, as used by the {{jsxref(\"RegExp\")}} type, and as documented in our [guide on regular expressions](/blog/Web/JavaScript/Guide/Regular_expressions); the `'u'` flag is specified when compiling the regular expression so that the pattern is treated as a sequence of Unicode code points, instead of as {{Glossary(\"ASCII\")}}. No forward slashes should be specified around the pattern text.\n\nIf the specified pattern is not specified or is invalid, no regular expression is applied and this attribute is ignored completely.\n\n> [!NOTE]\n> Use the [`title`](/blog/Web/HTML/Reference/Elements/input#title) attribute to specify text that most browsers will display as a tooltip to explain what the requirements are to match the pattern. You should also include other explanatory text nearby.\n\nSee [Specifying a pattern](#specifying_a_pattern) for further details and an example.\n\n### `placeholder`\n\nThe `placeholder` attribute is a string that provides a brief hint to the user as to what kind of information is expected in the field. It should be a word or short phrase that demonstrates the expected type of data, rather than an explanatory message. The text _must not_ include carriage returns or line feeds.\n\nIf the control's content has one directionality ({{Glossary(\"LTR\")}} or {{Glossary(\"RTL\")}}) but needs to present the placeholder in the opposite directionality, you can use Unicode bidirectional algorithm formatting characters to override directionality within the placeholder; see [How to use Unicode controls for bidi text](https://www.w3.org/International/questions/qa-bidi-unicode-controls) for more information.\n\n> [!NOTE]\n> Avoid using the `placeholder` attribute if you can. It is not as semantically useful as other ways to explain your form, and can cause unexpected technical issues with your content. See [`<input>` accessibility concerns](/blog/Web/HTML/Reference/Elements/input#accessibility) for more information.\n\n### `readonly`\n\nA Boolean attribute which, if present, means this field cannot be edited by the user. Its `value` can, however, still be changed by JavaScript code directly setting the {{domxref(\"HTMLInputElement\")}} `value` property.\n\n> [!NOTE]\n> Because a read-only field cannot have a value, `required` does not have any effect on inputs with the `readonly` attribute also specified.\n\n### `size`\n\nThe `size` attribute is a numeric value indicating how many characters wide the input field should be. The value must be a number greater than zero, and the default value is 20. Since character widths vary, this may or may not be exact and should not be relied upon to be so; the resulting input may be narrower or wider than the specified number of characters, depending on the characters and the font ({{cssxref(\"font\")}} settings in use).\n\nThis does _not_ set a limit on how many characters the user can enter into the field. It only specifies approximately how many can be seen at a time. To set an upper limit on the length of the input data, use the [`maxlength`](#maxlength) attribute.\n\n### `spellcheck`\n\nThe [`spellcheck`](/blog/Web/HTML/Reference/Global_attributes/spellcheck) global attribute is used to indicate whether to enable spell-checking for an element. It can be used on any editable content, but here we consider specifics related to the use of `spellcheck` on {{HTMLElement(\"input\")}} elements. The permitted values for `spellcheck` are:\n\n- `false`\n  - : Disable spell-checking for this element.\n- `true`\n  - : Enable spell-checking for this element.\n- `\"\"` (empty string) or no value\n  - : Follow the element's default behavior for spell-checking. This may be based upon a parent's `spellcheck` setting or other factors.\n\nAn input field can have spell-checking enabled if it doesn't have the [readonly](#readonly) attribute set and is not disabled.\n\nThe value returned by reading `spellcheck` may not reflect the actual state of spell-checking within a control, if the {{Glossary(\"user agent\", \"user agent's\")}} preferences override the setting.\n\n## Using text inputs\n\n`<input>` elements of type `text` create basic, single-line inputs. You should use them anywhere you want the user to enter a single-line value and there isn't a more specific input type available for collecting that value (for example, if it's a [date](/blog/Web/HTML/Reference/Elements/input/datetime-local), [URL](/blog/Web/HTML/Reference/Elements/input/url), [email](/blog/Web/HTML/Reference/Elements/input/email), or [search term](/blog/Web/HTML/Reference/Elements/input/search), you've got better options available).\n\n### Basic example\n\n```html\n<form>\n  <div>\n    <label for=\"uname\">Choose a username: </label>\n    <input type=\"text\" id=\"uname\" name=\"name\" />\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n\nThis renders like so:\n\n{{EmbedLiveSample(\"Basic_example\", 600, 80)}}\n\nWhen submitted, the data name/value pair sent to the server will be `name=Chris` (if \"Chris\" was entered as the input value before submission). You must remember to include [`name`](/blog/Web/HTML/Reference/Elements/input#name) attribute on the {{HTMLElement(\"input\")}} element, otherwise the text field's value won't be included with the submitted data.\n\n### Setting placeholders\n\nYou can provide a useful placeholder inside your text input that can provide a hint as to what to enter by including using the [`placeholder`](/blog/Web/HTML/Reference/Elements/input#placeholder) attribute. Look at the following example:\n\n```html\n<form>\n  <div>\n    <label for=\"uname\">Choose a username: </label>\n    <input\n      type=\"text\"\n      id=\"uname\"\n      name=\"name\"\n      placeholder=\"Lower case, all one word\" />\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n\nYou can see how the placeholder is rendered below:\n\n{{EmbedLiveSample(\"Setting_placeholders\", 600, 80)}}\n\nThe placeholder is typically rendered in a lighter color than the element's foreground color, and automatically vanishes when the user begins to enter text into the field (or whenever the field has a value set programmatically by setting its `value` attribute).\n\n### Physical input element size\n\nThe physical size of the input box can be controlled using the [`size`](/blog/Web/HTML/Reference/Elements/input#size) attribute. With it, you can specify the number of characters the text input can display at a time. This affects the width of the element, letting you specify the width in terms of characters rather than pixels. In this example, for instance, the input is 30 characters wide:\n\n```html\n<form>\n  <div>\n    <label for=\"uname\">Choose a username: </label>\n    <input\n      type=\"text\"\n      id=\"uname\"\n      name=\"name\"\n      placeholder=\"Lower case, all one word\"\n      size=\"30\" />\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n\n{{EmbedLiveSample('Physical_input_element_size', 600, 80)}}\n\n## Validation\n\n`<input>` elements of type `text` have no automatic validation applied to them (since a basic text input needs to be capable of accepting any arbitrary string), but there are some client-side validation options available, which we'll discuss below.\n\n> [!NOTE]\n> HTML form validation is _not_ a substitute for server-scripts that ensure the entered data is in the proper format. It's far too easy for someone to make adjustments to the HTML that allow them to bypass the validation, or to remove it entirely. It's also possible for someone to bypass your HTML entirely and submit the data directly to your server. If your server-side code fails to validate the data it receives, disaster could strike when improperly-formatted data (or data which is too large, is of the wrong type, and so forth) is entered into your database.\n\n### A note on styling\n\nThere are useful pseudo-classes available for styling form elements to help the user see when their values are valid or invalid. These are {{cssxref(\":valid\")}} and {{cssxref(\":invalid\")}}. In this section, we'll use the following CSS, which will place a check (tick) mark next to inputs containing valid values, and a cross (X) next to inputs containing invalid values.\n\n```css\ndiv {\n  margin-bottom: 10px;\n  position: relative;\n}\n\ninput + span {\n  padding-right: 30px;\n}\n\ninput:invalid + span::after {\n  position: absolute;\n  content: \"✖\";\n  padding-left: 5px;\n}\n\ninput:valid + span::after {\n  position: absolute;\n  content: \"✓\";\n  padding-left: 5px;\n}\n```\n\nThe technique also requires a {{htmlelement(\"span\")}} element to be placed after the form element, which acts as a holder for the icons. This was necessary because some input types on some browsers don't display icons placed directly after them very well.\n\n### Making input required\n\nYou can use the [`required`](/blog/Web/HTML/Reference/Elements/input#required) attribute as an easy way of making entering a value required before form submission is allowed:\n\n```html\n<form>\n  <div>\n    <label for=\"uname\">Choose a username: </label>\n    <input type=\"text\" id=\"uname\" name=\"name\" required />\n    <span class=\"validity\"></span>\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n\n```css hidden\ndiv {\n  margin-bottom: 10px;\n  position: relative;\n}\ninput + span {\n  padding-right: 30px;\n}\ninput:invalid + span::after {\n  position: absolute;\n  content: \"✖\";\n  padding-left: 5px;\n}\ninput:valid + span::after {\n  position: absolute;\n  content: \"✓\";\n  padding-left: 5px;\n}\n```\n\nThis renders like so:\n\n{{EmbedLiveSample('Making_input_required', 600, 100)}}\n\nIf you try to submit the form with no search term entered into it, the browser will show an error message.\n\n### Input value length\n\nYou can specify a minimum length (in characters) for the entered value using the [`minlength`](/blog/Web/HTML/Reference/Elements/input#minlength) attribute; similarly, use [`maxlength`](/blog/Web/HTML/Reference/Elements/input#maxlength) to set the maximum length of the entered value, in characters.\n\nThe example below requires that the entered value be 4–8 characters in length.\n\n```html\n<form>\n  <div>\n    <label for=\"uname\">Choose a username: </label>\n    <input\n      type=\"text\"\n      id=\"uname\"\n      name=\"name\"\n      required\n      size=\"10\"\n      placeholder=\"Username\"\n      minlength=\"4\"\n      maxlength=\"8\" />\n    <span class=\"validity\"></span>\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n\n```css hidden\ndiv {\n  margin-bottom: 10px;\n  position: relative;\n}\ninput + span {\n  padding-right: 30px;\n}\ninput:invalid + span::after {\n  position: absolute;\n  content: \"✖\";\n  padding-left: 5px;\n}\ninput:valid + span::after {\n  position: absolute;\n  content: \"✓\";\n  padding-left: 5px;\n}\n```\n\nThis renders like so:\n\n{{EmbedLiveSample('Input_value_length', 600, 100)}}\n\nIf you try to submit the form with less than 4 characters, you'll be given an appropriate error message (which differs between browsers). If you try to enter more than 8 characters, the browser won't let you.\n\n> [!NOTE]\n> If you specify a `minlength` but do not specify `required`, the input is considered valid, since the user is not required to specify a value.\n\n### Specifying a pattern\n\nYou can use the [`pattern`](/blog/Web/HTML/Reference/Elements/input#pattern) attribute to specify a regular expression that the inputted value must match in order to be considered valid (see [Validating against a regular expression](/blog/Learn_web_development/Extensions/Forms/Form_validation#validating_against_a_regular_expression) for a crash course on using regular expressions to validate inputs).\n\nThe example below restricts the value to 4-8 characters and requires that it contain only lower-case letters.\n\n```html\n<form>\n  <div>\n    <label for=\"uname\">Choose a username: </label>\n    <input\n      type=\"text\"\n      id=\"uname\"\n      name=\"name\"\n      required\n      size=\"45\"\n      pattern=\"[a-z]{4,8}\" />\n    <span class=\"validity\"></span>\n    <p>Usernames must be lowercase and 4-8 characters in length.</p>\n  </div>\n  <div>\n    <button>Submit</button>\n  </div>\n</form>\n```\n\n```css hidden\ndiv {\n  margin-bottom: 10px;\n  position: relative;\n}\n\np {\n  font-size: 80%;\n  color: #999;\n}\n\ninput + span {\n  padding-right: 30px;\n}\n\ninput:invalid + span::after {\n  position: absolute;\n  content: \"✖\";\n  padding-left: 5px;\n}\n\ninput:valid + span::after {\n  position: absolute;\n  content: \"✓\";\n  padding-left: 5px;\n}\n```\n\nThis renders like so:\n\n{{EmbedLiveSample('Specifying_a_pattern', 600, 130)}}\n\n## Examples\n\nYou can see good examples of text inputs used in context in our [Your first HTML form](/blog/Learn_web_development/Extensions/Forms/Your_first_form) and [How to structure an HTML form](/blog/Learn_web_development/Extensions/Forms/How_to_structure_a_web_form) articles.\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <td><strong><a href=\"#value\">Value</a></strong></td>\n      <td>\n        A string representing the text contained in\n        the text field.\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Events</strong></td>\n      <td>\n        {{domxref(\"HTMLElement/change_event\", \"change\")}} and\n        {{domxref(\"Element/input_event\", \"input\")}}\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Supported Common Attributes</strong></td>\n      <td>\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#autocomplete\"><code>autocomplete</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#list\"><code>list</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#maxlength\"><code>maxlength</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#minlength\"><code>minlength</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#pattern\"><code>pattern</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#placeholder\"><code>placeholder</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#readonly\"><code>readonly</code></a>,\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#required\"><code>required</code></a> and\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#size\"><code>size</code></a>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>IDL attributes</strong></td>\n      <td><a href=\"/blog/Web/HTML/Reference/Elements/input#list\"><code>list</code></a>, <code>value</code></td>\n    </tr>\n    <tr>\n      <td><strong>DOM interface</strong></td>\n      <td><p>{{domxref(\"HTMLInputElement\")}}</p></td>\n    </tr>\n    <tr>\n      <td><strong>Methods</strong></td>\n      <td>\n        {{domxref(\"HTMLInputElement.select\", \"select()\")}},\n        {{domxref(\"HTMLInputElement.setRangeText\", \"setRangeText()\")}}\n        and\n        {{domxref(\"HTMLInputElement.setSelectionRange\", \"setSelectionRange()\")}}.\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Implicit ARIA Role</strong></td>\n      <td>with no <code>list</code> attribute:\n                <code><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/textbox_role\">textbox</a></code></td>\n      <td>with <code>list</code> attribute: <code><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/combobox_role\">combobox</a></code></td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [HTML Forms](/blog/Learn_web_development/Extensions/Forms)\n- {{HTMLElement(\"input\")}} and the {{domxref(\"HTMLInputElement\")}} interface it's based upon.\n- [`<input type=\"search\">`](/blog/Web/HTML/Reference/Elements/input/search)\n- {{HTMLElement(\"textarea\")}}: Multi-line text input\n","slug":"5381410523d148fdbae629f1ebd1de25","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:06:09.741Z","dateupdated":"2025-07-05T19:06:09.741Z","layout":"PostBanner"}