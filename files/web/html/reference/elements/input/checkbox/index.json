{"title":"Checkbox","tag":"html/reference/elements/input/checkbox","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\n{{htmlelement(\"input\")}} elements of type **`checkbox`** are rendered by default as boxes that are checked (ticked) when activated, like you might see in an official government paper form. The exact appearance depends upon the operating system configuration under which the browser is running. Generally this is a square but it may have rounded corners. A checkbox allows you to select single values for submission in a form (or not).\n\n{{InteractiveExample(\"HTML Demo: &lt;input type=&quot;checkbox&quot;&gt;\", \"tabbed-standard\")}}\n\n```html interactive-example\n<fieldset>\n  <legend>Choose your monster's features:</legend>\n\n  <div>\n    <input type=\"checkbox\" id=\"scales\" name=\"scales\" checked />\n    <label for=\"scales\">Scales</label>\n  </div>\n\n  <div>\n    <input type=\"checkbox\" id=\"horns\" name=\"horns\" />\n    <label for=\"horns\">Horns</label>\n  </div>\n</fieldset>\n```\n\n```css interactive-example\np,\nlabel {\n  font:\n    1rem \"Fira Sans\",\n    sans-serif;\n}\n\ninput {\n  margin: 0.4rem;\n}\n```\n\n> **Note:** [Radio buttons](/blog/Web/HTML/Reference/Elements/input/radio) are similar to checkboxes, but with an important distinction â€” [same-named radio buttons](/blog/Web/HTML/Reference/Elements/input/radio#defining_a_radio_group) are grouped into a set in which only one radio button can be selected at a time, whereas checkboxes allow you to turn single values on and off. Where multiple same-named controls exist, radio buttons allow one to be selected out of them all, whereas checkboxes allow multiple values to be selected.\n\n## Value\n\nA string representing the value of the checkbox. This is not displayed on the client-side, but on the server this is the `value` given to the data submitted with the checkbox's `name`. Take the following example:\n\n```html\n<form>\n  <div>\n    <input\n      type=\"checkbox\"\n      id=\"subscribeNews\"\n      name=\"subscribe\"\n      value=\"newsletter\" />\n    <label for=\"subscribeNews\">Subscribe to newsletter?</label>\n  </div>\n  <div>\n    <button type=\"submit\">Subscribe</button>\n  </div>\n</form>\n```\n\nIn this example, we've got a name of `subscribe`, and a value of `newsletter`. When the form is submitted, the data name/value pair will be `subscribe=newsletter`.\n\nIf the `value` attribute was omitted, the default value for the checkbox is `on`, so the submitted data in that case would be `subscribe=on`.\n\n> [!NOTE]\n> If a checkbox is unchecked when its form is submitted, neither the name nor the value is submitted to the server. There is no HTML-only method of representing a checkbox's unchecked state (e.g., `value=unchecked`). If you wanted to submit a default value for the checkbox when it is unchecked, you could include JavaScript to create an {{HTMLElement(\"input/hidden\", '&lt;input type=\"hidden\"&gt;')}} within the form with a value indicating an unchecked state.\n\n## Additional attributes\n\nIn addition to the [common attributes](/blog/Web/HTML/Reference/Elements/input#attributes) shared by all {{HTMLElement(\"input\")}} elements, `checkbox` inputs support the following attributes.\n\n- `checked`\n\n  - : A [boolean](/blog/Glossary/Boolean/HTML) attribute indicating whether this checkbox is checked by default (when the page loads). It does _not_ indicate whether this checkbox is currently checked: if the checkbox's state is changed, this content attribute does not reflect the change. (Only the {{domxref(\"HTMLInputElement\")}}'s `checked` IDL attribute is updated.)\n    > [!NOTE]\n    > Unlike other input controls, a checkbox's value is only included in the submitted data if the checkbox is currently `checked`. If it is, then the value of the checkbox's `value` attribute is reported as the input's value, or `on` if no `value` is set.\n    > Unlike other browsers, Firefox by default [persists the dynamic checked state](https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing) of an `<input>` across page loads. Use the [`autocomplete`](/blog/Web/HTML/Reference/Elements/input#autocomplete) attribute to control this feature.\n\n- `value`\n\n  - : The `value` attribute is one which all {{HTMLElement(\"input\")}}s share; however, it serves a special purpose for inputs of type `checkbox`: when a form is submitted, only checkboxes which are currently checked are submitted to the server, and the reported value is the value of the `value` attribute. If the `value` is not otherwise specified, it is the string `on` by default. This is demonstrated in the section [Value](#value) above.\n\n## Using checkbox inputs\n\nWe already covered the most basic use of checkboxes above. Let's now look at the other common checkbox-related features and techniques you'll need.\n\n### Handling multiple checkboxes\n\nThe example we saw above only contained one checkbox; in real-world situations you'll be likely to encounter multiple checkboxes. If they are completely unrelated, then you can just deal with them all separately, as shown above. However, if they're all related, things are not quite so simple.\n\nFor example, in the following demo we include multiple checkboxes to allow the user to select their interests (see the full version in the [Examples](#examples) section).\n\n```html\n<fieldset>\n  <legend>Choose your interests</legend>\n  <div>\n    <input type=\"checkbox\" id=\"coding\" name=\"interest\" value=\"coding\" />\n    <label for=\"coding\">Coding</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"music\" name=\"interest\" value=\"music\" />\n    <label for=\"music\">Music</label>\n  </div>\n</fieldset>\n```\n\n{{EmbedLiveSample('Handling_multiple_checkboxes', 600, 100)}}\n\nIn this example you will see that we've given each checkbox the same `name`. If both checkboxes are checked and then the form is submitted, you'll get a string of name/value pairs submitted like this: `interest=coding&interest=music`. When this string reaches the server, you need to parse it other than as an associative array, so all values, not only the last value, of `interest` are captured. For one technique used with Python, see [Handle Multiple Checkboxes with a Single Serverside Variable](https://stackoverflow.com/questions/18745456/handle-multiple-checkboxes-with-a-single-serverside-variable), for example.\n\n### Checking boxes by default\n\nTo make a checkbox checked by default, you give it the `checked` attribute. See the below example:\n\n```html\n<fieldset>\n  <legend>Choose your interests</legend>\n  <div>\n    <input type=\"checkbox\" id=\"coding\" name=\"interest\" value=\"coding\" checked />\n    <label for=\"coding\">Coding</label>\n  </div>\n  <div>\n    <input type=\"checkbox\" id=\"music\" name=\"interest\" value=\"music\" />\n    <label for=\"music\">Music</label>\n  </div>\n</fieldset>\n```\n\n{{EmbedLiveSample('Checking_boxes_by_default', 600, 100)}}\n\n### Providing a bigger hit area for your checkboxes\n\nIn the above examples, you may have noticed that you can toggle a checkbox by clicking on its associated {{htmlelement(\"label\")}} element as well as on the checkbox itself. This is a really useful feature of HTML form labels that makes it easier to click the option you want, especially on small-screen devices like smartphones.\n\nBeyond accessibility, this is another good reason to properly set up `<label>` elements on your forms.\n\n### Indeterminate state checkboxes\n\nA checkbox can be in an **indeterminate** state. This is set using the {{domxref(\"HTMLInputElement\")}} object's [`indeterminate`](/blog/Web/API/HTMLInputElement/indeterminate) property via JavaScript (it cannot be set using an HTML attribute):\n\n```js\ninputInstance.indeterminate = true;\n```\n\nWhen `indeterminate` is `true`, the checkbox has a horizontal line in the box (it looks somewhat like a hyphen or minus sign) instead of a check/tick in most browsers.\n\n> [!NOTE]\n> This is purely a visual change. It has no impact on whether the checkbox's `value` is used in a form submission. That is decided by the `checked` state, regardless of the `indeterminate` state.\n\nThere are not many use cases for this property. The most common is when a checkbox is available that \"owns\" a number of sub-options (which are also checkboxes). If all of the sub-options are checked, the owning checkbox is also checked, and if they're all unchecked, the owning checkbox is unchecked. If any one or more of the sub-options have a different state than the others, the owning checkbox is in the indeterminate state.\n\nThis can be seen in the below example (thanks to [CSS Tricks](https://css-tricks.com/indeterminate-checkboxes/) for the inspiration). In this example we keep track of the ingredients we are collecting for a recipe. When you check or uncheck an ingredient's checkbox, a JavaScript function checks the total number of checked ingredients:\n\n- If none are checked, the recipe name's checkbox is set to unchecked.\n- If one or two are checked, the recipe name's checkbox is set to `indeterminate`.\n- If all three are checked, the recipe name's checkbox is set to `checked`.\n\nSo in this case the `indeterminate` state is used to state that collecting the ingredients has started, but the recipe is not yet complete.\n\n```js\nconst overall = document.querySelector(\"#enchantment\");\nconst ingredients = document.querySelectorAll(\"ul input\");\n\noverall.addEventListener(\"click\", (e) => {\n  e.preventDefault();\n});\n\nfor (const ingredient of ingredients) {\n  ingredient.addEventListener(\"click\", updateDisplay);\n}\n\nfunction updateDisplay() {\n  let checkedCount = 0;\n  for (const ingredient of ingredients) {\n    if (ingredient.checked) {\n      checkedCount++;\n    }\n  }\n\n  if (checkedCount === 0) {\n    overall.checked = false;\n    overall.indeterminate = false;\n  } else if (checkedCount === ingredients.length) {\n    overall.checked = true;\n    overall.indeterminate = false;\n  } else {\n    overall.checked = false;\n    overall.indeterminate = true;\n  }\n}\n```\n\n{{EmbedGHLiveSample(\"learning-area/html/forms/indeterminate-example/index.html\", '100%', 200)}}\n\n## Validation\n\nCheckboxes do support [validation](/blog/Web/HTML/Guides/Constraint_validation) (offered to all {{HTMLElement(\"input\")}}s). However, most of the {{domxref(\"ValidityState\")}}s will always be `false`. If the checkbox has the [`required`](/blog/Web/HTML/Reference/Elements/input#required) attribute, but is not checked, then {{domxref(\"ValidityState.valueMissing\")}} will be `true`.\n\n## Examples\n\nThe following example is an extended version of the \"multiple checkboxes\" example we saw above â€” it has more standard options, plus an \"other\" checkbox that when checked causes a text field to appear to enter a value for the \"other\" option. This is achieved with a short block of JavaScript. The example includes implicit labels, with the `<input>` directly inside the `<label>`. The text input, without a visible label, includes the [`aria-label`](/blog/Web/Accessibility/ARIA/Reference/Attributes/aria-label) attribute which provides its accessible name. This example also includes some CSS to improve the styling.\n\n### HTML\n\n```html\n<form>\n  <fieldset>\n    <legend>Choose your interests</legend>\n    <div>\n      <label>\n        <input type=\"checkbox\" id=\"coding\" name=\"interest\" value=\"coding\" />\n        Coding\n      </label>\n    </div>\n    <div>\n      <label>\n        <input type=\"checkbox\" id=\"music\" name=\"interest\" value=\"music\" />\n        Music\n      </label>\n    </div>\n    <div>\n      <label>\n        <input type=\"checkbox\" id=\"art\" name=\"interest\" value=\"art\" />\n        Art\n      </label>\n    </div>\n    <div>\n      <label>\n        <input type=\"checkbox\" id=\"sports\" name=\"interest\" value=\"sports\" />\n        Sports\n      </label>\n    </div>\n    <div>\n      <label>\n        <input type=\"checkbox\" id=\"cooking\" name=\"interest\" value=\"cooking\" />\n        Cooking\n      </label>\n    </div>\n    <div>\n      <label>\n        <input type=\"checkbox\" id=\"other\" name=\"interest\" value=\"other\" />\n        Other\n      </label>\n      <input\n        type=\"text\"\n        id=\"otherValue\"\n        name=\"other\"\n        aria-label=\"Other interest\" />\n    </div>\n    <div>\n      <button type=\"submit\">Submit form</button>\n    </div>\n  </fieldset>\n</form>\n```\n\n### CSS\n\n```css\nhtml {\n  font-family: sans-serif;\n}\n\nform {\n  width: 600px;\n  margin: 0 auto;\n}\n\ndiv {\n  margin-bottom: 10px;\n}\n\nfieldset {\n  background: cyan;\n  border: 5px solid blue;\n}\n\nlegend {\n  padding: 10px;\n  background: blue;\n  color: cyan;\n}\n```\n\n### JavaScript\n\n```js\nconst otherCheckbox = document.querySelector(\"#other\");\nconst otherText = document.querySelector(\"#otherValue\");\notherText.style.visibility = \"hidden\";\n\notherCheckbox.addEventListener(\"change\", () => {\n  if (otherCheckbox.checked) {\n    otherText.style.visibility = \"visible\";\n    otherText.value = \"\";\n  } else {\n    otherText.style.visibility = \"hidden\";\n  }\n});\n```\n\n{{EmbedLiveSample('Examples', '100%', 300)}}\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <td><strong><a href=\"#value\">Value</a></strong></td>\n      <td>\n        A string representing the value of the\n        checkbox.\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Events</strong></td>\n      <td>{{domxref(\"HTMLElement/change_event\", \"change\")}} and {{domxref(\"Element/input_event\", \"input\")}}</td>\n    </tr>\n    <tr>\n      <td><strong>Supported common attributes</strong></td>\n      <td><code><a href=\"#checked\">checked</a></code></td>\n    </tr>\n    <tr>\n      <td><strong>IDL attributes</strong></td>\n      <td>\n        <code><a href=\"/blog/Web/API/HTMLInputElement/checked\">checked</a></code>,\n        <code><a href=\"/blog/Web/API/HTMLInputElement/indeterminate\">indeterminate</a></code> and\n        <code><a href=\"/blog/Web/API/HTMLInputElement/value\">value</a></code>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>DOM interface</strong></td>\n      <td><p>{{domxref(\"HTMLInputElement\")}}</p></td>\n    </tr>\n    <tr>\n      <td><strong>Methods</strong></td>\n      <td>\n        {{domxref(\"HTMLInputElement.select\", \"select()\")}}\n      </td>\n    </tr>\n    <tr>\n      <td><strong>Implicit ARIA Role</strong></td>\n      <td><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/checkbox_role\"><code>checkbox</code></a></td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{cssxref(\":checked\")}}, {{cssxref(\":indeterminate\")}}: CSS selectors that let you style checkboxes based on their current state\n- {{domxref(\"HTMLInputElement\")}}: HTML DOM API that implements the `<input>` element\n","slug":"6083b4ea366f4ed39806612dbf07bca6","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:06:07.957Z","dateupdated":"2025-07-05T19:06:07.957Z","layout":"PostBanner"}