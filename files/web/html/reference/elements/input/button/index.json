{"title":"Button","tag":"html/reference/elements/input/button","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\n{{HTMLElement(\"input\")}} elements of type **`button`** are rendered as push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the {{domxref(\"Element/click_event\", \"click\")}} event).\n\n{{InteractiveExample(\"HTML Demo: &lt;input type=&quot;button&quot;&gt;\", \"tabbed-shorter\")}}\n\n```html interactive-example\n<input class=\"styled\" type=\"button\" value=\"Add to favorites\" />\n```\n\n```css interactive-example\n.styled {\n  border: 0;\n  line-height: 2.5;\n  padding: 0 20px;\n  font-size: 1rem;\n  text-align: center;\n  color: #fff;\n  text-shadow: 1px 1px 1px #000;\n  border-radius: 10px;\n  background-color: rgb(220 0 0 / 100%);\n  background-image: linear-gradient(\n    to top left,\n    rgb(0 0 0 / 20%),\n    rgb(0 0 0 / 20%) 30%,\n    rgb(0 0 0 / 0%)\n  );\n  box-shadow:\n    inset 2px 2px 3px rgb(255 255 255 / 60%),\n    inset -2px -2px 3px rgb(0 0 0 / 60%);\n}\n\n.styled:hover {\n  background-color: rgb(255 0 0 / 100%);\n}\n\n.styled:active {\n  box-shadow:\n    inset -2px -2px 3px rgb(255 255 255 / 60%),\n    inset 2px 2px 3px rgb(0 0 0 / 60%);\n}\n```\n\n> [!NOTE]\n> While `<input>` elements of type `button` are still perfectly valid HTML, the newer {{HTMLElement(\"button\")}} element is now the favored way to create buttons. Given that a {{HTMLElement(\"button\")}}'s label text is inserted between the opening and closing tags, you can include HTML in the label, even images.\n\n## Value\n\n### Button with a value\n\nAn `<input type=\"button\">` elements' [`value`](/blog/Web/HTML/Reference/Elements/input#value) attribute contains a string that is used as the button's label. The `value` provides the {{glossary(\"accessible description\")}} for the button.\n\n```html\n<input type=\"button\" value=\"Click Me\" />\n```\n\n{{EmbedLiveSample(\"Button_with_a_value\", 650, 30)}}\n\n### Button without a value\n\nIf you don't specify a `value`, you get an empty button:\n\n```html\n<input type=\"button\" />\n```\n\n{{EmbedLiveSample(\"Button_without_a_value\", 650, 30)}}\n\n## Using buttons\n\n`<input type=\"button\">` elements have no default behavior (their cousins, `<input type=\"submit\">` and [`<input type=\"reset\">`](/blog/Web/HTML/Reference/Elements/input/reset) are used to submit and reset forms, respectively). To make buttons do anything, you have to write JavaScript code to do the work.\n\n### A basic button\n\nWe'll begin by creating a basic button with a {{domxref(\"Element/click_event\", \"click\")}} event handler that starts our machine (well, it toggles the `value` of the button and the text content of the following paragraph):\n\n```html\n<form>\n  <input type=\"button\" value=\"Start machine\" />\n</form>\n<p>The machine is stopped.</p>\n```\n\n```js\nconst button = document.querySelector(\"input\");\nconst paragraph = document.querySelector(\"p\");\n\nbutton.addEventListener(\"click\", updateButton);\n\nfunction updateButton() {\n  if (button.value === \"Start machine\") {\n    button.value = \"Stop machine\";\n    paragraph.textContent = \"The machine has started!\";\n  } else {\n    button.value = \"Start machine\";\n    paragraph.textContent = \"The machine is stopped.\";\n  }\n}\n```\n\nThe script gets a reference to the {{domxref(\"HTMLInputElement\")}} object representing the `<input>` in the DOM, saving this reference in the variable `button`. {{domxref(\"EventTarget.addEventListener\", \"addEventListener()\")}} is then used to establish a function that will be run when {{domxref(\"Element/click_event\", \"click\")}} events occur on the button.\n\n{{EmbedLiveSample(\"A_basic_button\", 650, 100)}}\n\n### Adding keyboard shortcuts to buttons\n\nKeyboard shortcuts, also known as access keys and keyboard equivalents, let the user trigger a button using a key or combination of keys on the keyboard. To add a keyboard shortcut to a button — just as you would with any {{HTMLElement(\"input\")}} for which it makes sense — you use the [`accesskey`](/blog/Web/HTML/Reference/Global_attributes/accesskey) global attribute.\n\nIn this example, <kbd>s</kbd> is specified as the access key (you'll need to press <kbd>s</kbd> plus the particular modifier keys for your browser/OS combination; see [accesskey](/blog/Web/HTML/Reference/Global_attributes/accesskey) for a useful list of those).\n\n```html\n<form>\n  <input type=\"button\" value=\"Start machine\" accesskey=\"s\" />\n</form>\n<p>The machine is stopped.</p>\n```\n\n```js hidden\nconst button = document.querySelector(\"input\");\nconst paragraph = document.querySelector(\"p\");\n\nbutton.addEventListener(\"click\", updateButton);\n\nfunction updateButton() {\n  if (button.value === \"Start machine\") {\n    button.value = \"Stop machine\";\n    paragraph.textContent = \"The machine has started!\";\n  } else {\n    button.value = \"Start machine\";\n    paragraph.textContent = \"The machine is stopped.\";\n  }\n}\n```\n\n{{EmbedLiveSample(\"Adding_keyboard_shortcuts_to_buttons\", 650, 100)}}\n\n> [!NOTE]\n> The problem with the above example of course is that the user will not know what the access key is! In a real site, you'd have to provide this information in a way that doesn't interfere with the site design (for example by providing an easily accessible link that points to information on what the site access keys are).\n\n### Disabling and enabling a button\n\nTo disable a button, specify the [`disabled`](/blog/Web/HTML/Reference/Attributes/disabled) global attribute on it, like so:\n\n```html\n<input type=\"button\" value=\"Disable me\" disabled />\n```\n\n#### Setting the disabled attribute\n\nYou can enable and disable buttons at run time by setting `disabled` to `true` or `false`. In this example our button starts off enabled, but if you press it, it is disabled using `button.disabled = true`. A {{domxref(\"Window.setTimeout\", \"setTimeout()\")}} function is then used to reset the button back to its enabled state after two seconds.\n\n```html\n<input type=\"button\" value=\"Enabled\" />\n```\n\n```js\nconst button = document.querySelector(\"input\");\n\nbutton.addEventListener(\"click\", disableButton);\n\nfunction disableButton() {\n  button.disabled = true;\n  button.value = \"Disabled\";\n  setTimeout(() => {\n    button.disabled = false;\n    button.value = \"Enabled\";\n  }, 2000);\n}\n```\n\n{{EmbedLiveSample(\"Setting_the_disabled_attribute\", 650, 60)}}\n\n#### Inheriting the disabled state\n\nIf the `disabled` attribute isn't specified, the button inherits its `disabled` state from its parent element. This makes it possible to enable and disable groups of elements all at once by enclosing them in a container such as a {{HTMLElement(\"fieldset\")}} element, and then setting `disabled` on the container.\n\nThe example below shows this in action. This is very similar to the previous example, except that the `disabled` attribute is set on the `<fieldset>` when the first button is pressed — this causes all three buttons to be disabled until the two second timeout has passed.\n\n```html\n<fieldset>\n  <legend>Button group</legend>\n  <input type=\"button\" value=\"Button 1\" />\n  <input type=\"button\" value=\"Button 2\" />\n  <input type=\"button\" value=\"Button 3\" />\n</fieldset>\n```\n\n```js\nconst button = document.querySelector(\"input\");\nconst fieldset = document.querySelector(\"fieldset\");\n\nbutton.addEventListener(\"click\", disableButton);\n\nfunction disableButton() {\n  fieldset.disabled = true;\n  setTimeout(() => {\n    fieldset.disabled = false;\n  }, 2000);\n}\n```\n\n{{EmbedLiveSample(\"Inheriting_the_disabled_state\", 650, 100)}}\n\n> [!NOTE]\n> Unlike other browsers, Firefox persists the `disabled` state of an `<input>` element even after the page is reloaded. As a workaround, set the `<input>` element's [`autocomplete`](/blog/Web/HTML/Reference/Elements/input#autocomplete) attribute to `off`. (See [Firefox bug 654072](https://bugzil.la/654072) for more details.)\n\n## Validation\n\nButtons don't participate in constraint validation; they have no real value to be constrained.\n\n## Examples\n\nThe below example shows a very basic drawing app created using a {{htmlelement(\"canvas\")}} element and some CSS and JavaScript (we'll hide the CSS for brevity). The top two controls allow you to choose the color and size of the drawing pen. The button, when clicked, invokes a function that clears the canvas.\n\n```html\n<div class=\"toolbar\">\n  <input type=\"color\" aria-label=\"select pen color\" />\n  <input\n    type=\"range\"\n    min=\"2\"\n    max=\"50\"\n    value=\"30\"\n    aria-label=\"select pen size\" /><span class=\"output\">30</span>\n  <input type=\"button\" value=\"Clear canvas\" />\n</div>\n\n<canvas class=\"myCanvas\">\n  <p>Add suitable fallback here.</p>\n</canvas>\n```\n\n```css hidden\nbody {\n  background: #ccc;\n  margin: 0;\n  overflow: hidden;\n}\n\n.toolbar {\n  background: #ccc;\n  width: 150px;\n  height: 75px;\n  padding: 5px;\n}\n\ninput[type=\"color\"],\ninput[type=\"button\"] {\n  width: 90%;\n  margin: 0 auto;\n  display: block;\n}\n\ninput[type=\"range\"] {\n  width: 70%;\n}\n\nspan {\n  position: relative;\n  bottom: 5px;\n}\n```\n\n```js\nconst canvas = document.querySelector(\".myCanvas\");\nconst width = (canvas.width = window.innerWidth);\nconst height = (canvas.height = window.innerHeight - 85);\nconst ctx = canvas.getContext(\"2d\");\n\nctx.fillStyle = \"rgb(0 0 0)\";\nctx.fillRect(0, 0, width, height);\n\nconst colorPicker = document.querySelector('input[type=\"color\"]');\nconst sizePicker = document.querySelector('input[type=\"range\"]');\nconst output = document.querySelector(\".output\");\nconst clearBtn = document.querySelector('input[type=\"button\"]');\n\n// covert degrees to radians\nfunction degToRad(degrees) {\n  return (degrees * Math.PI) / 180;\n}\n\n// update size picker output value\n\nsizePicker.oninput = () => {\n  output.textContent = sizePicker.value;\n};\n\n// store mouse pointer coordinates, and whether the button is pressed\nlet curX;\nlet curY;\nlet pressed = false;\n\n// update mouse pointer coordinates\ndocument.onmousemove = (e) => {\n  curX = e.pageX;\n  curY = e.pageY;\n};\n\ncanvas.onmousedown = () => {\n  pressed = true;\n};\n\ncanvas.onmouseup = () => {\n  pressed = false;\n};\n\nclearBtn.onclick = () => {\n  ctx.fillStyle = \"rgb(0 0 0)\";\n  ctx.fillRect(0, 0, width, height);\n};\n\nfunction draw() {\n  if (pressed) {\n    ctx.fillStyle = colorPicker.value;\n    ctx.beginPath();\n    ctx.arc(\n      curX,\n      curY - 85,\n      sizePicker.value,\n      degToRad(0),\n      degToRad(360),\n      false,\n    );\n    ctx.fill();\n  }\n\n  requestAnimationFrame(draw);\n}\n\ndraw();\n```\n\n{{EmbedLiveSample(\"Examples\", '100%', 600)}}\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <td><strong><a href=\"#value\">Value</a></strong></td>\n      <td>A string used as the button's label</td>\n    </tr>\n    <tr>\n      <td><strong>Events</strong></td>\n      <td>{{domxref(\"Element/click_event\", \"click\")}}</td>\n    </tr>\n    <tr>\n      <td><strong>Supported common attributes</strong></td>\n      <td>\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#type\"><code>type</code></a> and\n        <a href=\"/blog/Web/HTML/Reference/Elements/input#value\"><code>value</code></a>\n      </td>\n    </tr>\n    <tr>\n      <td><strong>IDL attributes</strong></td>\n      <td><code>value</code></td>\n    </tr>\n    <tr>\n      <td><strong>DOM interface</strong></td>\n      <td><p>{{domxref(\"HTMLInputElement\")}}</p></td>\n    </tr>\n    <tr>\n      <td><strong>Methods</strong></td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <td><strong>Implicit ARIA Role</strong></td>\n      <td><a href=\"/blog/Web/Accessibility/ARIA/Reference/Roles/button_role\"><code>button</code></a></td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{HTMLElement(\"input\")}} and the {{domxref(\"HTMLInputElement\")}} interface which implements it.\n- The more modern {{HTMLElement(\"button\")}} element.\n","slug":"fa1e0e07026446be90c8928156c73aef","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:06:07.861Z","dateupdated":"2025-07-05T19:06:07.861Z","layout":"PostBanner"}