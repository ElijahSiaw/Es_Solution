{"title":"Kbd","tag":"html/reference/elements/kbd","post":"\n\n{{Sidebar(\"html/reference/elements\")}}\n\nThe **`<kbd>`** [HTML](/blog/Web/HTML) element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the {{Glossary(\"user agent\")}} defaults to rendering the contents of a `<kbd>` element using its default monospace font, although this is not mandated by the HTML standard.\n\n{{InteractiveExample(\"HTML Demo: &lt;kbd&gt;\", \"tabbed-shorter\")}}\n\n```html interactive-example\n<p>\n  Please press <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd> to re-render an\n  Es Solution page.\n</p>\n```\n\n```css interactive-example\nkbd {\n  background-color: #eee;\n  border-radius: 3px;\n  border: 1px solid #b4b4b4;\n  box-shadow:\n    0 1px 1px rgba(0, 0, 0, 0.2),\n    0 2px 0 0 rgba(255, 255, 255, 0.7) inset;\n  color: #333;\n  display: inline-block;\n  font-size: 0.85em;\n  font-weight: 700;\n  line-height: 1;\n  padding: 2px 4px;\n  white-space: nowrap;\n}\n```\n\n`<kbd>` may be nested in various combinations with the {{HTMLElement(\"samp\")}} (Sample Output) element to represent various forms of input or output based on visual cues.\n\n## Attributes\n\nThis element only includes the [global attributes](/blog/Web/HTML/Reference/Global_attributes).\n\n## Usage notes\n\nOther elements can be used in tandem with `<kbd>` to represent more specific scenarios:\n\n- Nesting a `<kbd>` element within another `<kbd>` element represents an actual key or other unit of input as a portion of a larger input. See [Representing keystrokes within an input](#representing_keystrokes_within_an_input) below.\n- Nesting a `<kbd>` element inside a {{HTMLElement(\"samp\")}} element represents input that has been echoed back to the user by the system. See [Echoed input](#echoed_input), below, for an example.\n- Nesting a `<samp>` element inside a `<kbd>` element, on the other hand, represents input which is based on text presented by the system, such as the names of menus and menu items, or the names of buttons displayed on the screen. See the example under [Representing onscreen input options](#representing_onscreen_input_options) below.\n\n> [!NOTE]\n> You can define a custom style to override the browser's default font selection for the `<kbd>` element, although the user's preferences may potentially override your CSS.\n\n## Examples\n\n### Basic example\n\n```html\n<p>\n  Use the command <kbd>help my-command</kbd> to view documentation for the\n  command \"my-command\".\n</p>\n```\n\n#### Result\n\n{{ EmbedLiveSample('Basic_example', 350, 80) }}\n\n### Representing keystrokes within an input\n\nTo describe an input comprised of multiple keystrokes, you can nest multiple `<kbd>` elements, with an outer `<kbd>` element representing the overall input and each individual keystroke or component of the input enclosed within its own `<kbd>`.\n\n#### Unstyled\n\nFirst, let's look at what this looks like as just plain HTML.\n\n##### HTML\n\n```html\n<p>\n  You can also create a new document using the\n  <kbd><kbd>Ctrl</kbd>+<kbd>N</kbd></kbd> keyboard shortcut.\n</p>\n```\n\nThis wraps the entire key sequence in an outer `<kbd>` element, then each individual key within its own, in order to denote the components of the sequence.\n\n> [!NOTE]\n> You don't need to do all this wrapping; you can choose to simplify it by leaving out the external `<kbd>` element. In other words, simplifying this to just `<kbd>Ctrl</kbd>+<kbd>N</kbd>` would be perfectly valid.\n>\n> Depending on your style sheet, though, you may find it useful to do this kind of nesting.\n\n##### Result\n\nThe output looks like this without a style sheet applied:\n\n{{EmbedLiveSample(\"Unstyled\", 650, 80)}}\n\n#### With custom styles\n\nWe can make more sense of this by adding some CSS:\n\n##### CSS\n\nWe add a new selector for nested `<kbd>` elements, `kbd>kbd`, which we can apply when rendering keyboard keys:\n\n```css\nkbd > kbd {\n  border-radius: 3px;\n  padding: 1px 2px 0;\n  border: 1px solid black;\n}\n```\n\n##### HTML\n\nThen we update the HTML to use this class on the keys in the output to be presented:\n\n```html\n<p>\n  You can also create a new document by pressing the\n  <kbd><kbd>Ctrl</kbd>+<kbd>N</kbd></kbd> shortcut.\n</p>\n```\n\n##### Result\n\nThe result is just what we want!\n\n{{EmbedLiveSample(\"With_custom_styles\", 650, 80)}}\n\n### Echoed input\n\nNesting a `<kbd>` element inside a {{HTMLElement(\"samp\")}} element represents input that has been echoed back to the user by the system.\n\n```html\n<p>\n  If a syntax error occurs, the tool will output the initial command you typed\n  for your review:\n</p>\n<blockquote>\n  <samp><kbd>custom-git ad my-new-file.cpp</kbd></samp>\n</blockquote>\n```\n\n#### Result\n\n{{EmbedLiveSample(\"Echoed_input\", 650, 100)}}\n\n### Representing onscreen input options\n\nNesting a `<samp>` element inside a `<kbd>` element represents input which is based on text presented by the system, such as the names of menus and menu items, or the names of buttons displayed on the screen.\n\nFor example, you can explain how to choose the \"New Document\" option in the \"File\" menu using HTML that looks like this:\n\n```html-nolint\n<p>\n  To create a new file, choose the <kbd><kbd><samp>File</samp></kbd>\n  â‡’<kbd><samp>New Document</samp></kbd></kbd> menu option.\n</p>\n\n<p>\n  Don't forget to click the <kbd><samp>OK</samp></kbd> button to confirm once\n  you've entered the name of the new file.\n</p>\n```\n\nThis does some interesting nesting. For the menu option description, the entire input is enclosed in a `<kbd>` element. Then, inside that, both the menu and menu item names are contained within both `<kbd>` and `<samp>`, indicating an input which is selected from a screen widget.\n\n#### Result\n\n{{EmbedLiveSample(\"Representing_onscreen_input_options\", 650, 120)}}\n\n## Technical summary\n\n<table class=\"properties\">\n  <tbody>\n    <tr>\n      <th scope=\"row\">\n        <a href=\"/blog/Web/HTML/Guides/Content_categories\">Content categories</a>\n      </th>\n      <td>\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#flow_content\">Flow content</a>,\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#phrasing_content\">phrasing content</a>, palpable content.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Permitted content</th>\n      <td>\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#phrasing_content\">Phrasing content</a>.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Tag omission</th>\n      <td>None, both the starting and ending tag are mandatory.</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Permitted parents</th>\n      <td>\n        Any element that accepts\n        <a href=\"/blog/Web/HTML/Guides/Content_categories#phrasing_content\">phrasing content</a>.\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Implicit ARIA role</th>\n      <td>\n        <a href=\"https://w3c.github.io/html-aria/#dfn-no-corresponding-role\">No corresponding role</a>\n      </td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Permitted ARIA roles</th>\n      <td>Any</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">DOM interface</th>\n      <td>{{domxref(\"HTMLElement\")}}</td>\n    </tr>\n  </tbody>\n</table>\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- {{htmlelement(\"code\")}}\n","slug":"792bb12e5432446390a07fd973d99a8d","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T19:06:10.326Z","dateupdated":"2025-07-05T19:06:10.326Z","layout":"PostBanner"}