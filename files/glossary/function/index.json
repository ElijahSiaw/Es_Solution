{"title":"Function","tag":"glossary/function","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nA **function** is a code snippet that can be called by other code or by itself, or a {{Glossary(\"variable\")}} that refers to the function. When a function is called, {{Glossary(\"Argument\", \"arguments\")}} are passed to the function as input, and the function can optionally return a value. A function in {{glossary(\"JavaScript\")}} is also an {{glossary(\"object\")}}.\n\nA function name is an {{Glossary(\"identifier\")}} included as part of a function declaration or function expression. The function name's {{Glossary(\"scope\")}} depends on whether the function name is a declaration or expression.\n\n### Different types of functions\n\nAn **anonymous function** is a function without a function name. Only function expressions can be anonymous, function declarations must have a name:\n\n```js\n// Anonymous function created as a function expression\n(function () {});\n\n// Anonymous function created as an arrow function\n() => {};\n```\n\nThe following terms are not used in the ECMAScript language specification, they're jargon used to refer to different types of functions.\n\nA **named function** is a function with a function name:\n\n```js\n// Function declaration\nfunction foo() {}\n\n// Named function expression\n(function bar() {});\n\n// Arrow function\nconst baz = () => {};\n```\n\nAn **inner function** is a function inside another function (`square` in this case). An **outer function** is a function containing a function (`addSquares` in this case):\n\n```js\nfunction addSquares(a, b) {\n  function square(x) {\n    return x * x;\n  }\n  return square(a) + square(b);\n}\n\n// Arrow function\nconst addSquares2 = (a, b) => {\n  const square = (x) => x * x;\n  return square(a) + square(b);\n};\n```\n\nA **recursive function** is a function that calls itself. See {{Glossary(\"Recursion\", \"recursion\")}}.\n\n```js\nfunction loop(x) {\n  if (x >= 10) return;\n  loop(x + 1);\n}\n\n// Arrow function\nconst loop2 = (x) => {\n  if (x >= 10) return;\n  loop2(x + 1);\n};\n```\n\nAn **Immediately Invoked Function Expression** ({{glossary(\"IIFE\")}}) is a function that is called directly after the function is loaded into the browser's compiler. The way to identify an IIFE is by locating the extra left and right parenthesis at the end of the function's definition.\n\nFunction expressions, named or anonymous, can be called immediately.\n\n```js\n(function foo() {\n  console.log(\"Hello Foo\");\n})();\n\n(function food() {\n  console.log(\"Hello Food\");\n})();\n\n(() => console.log(\"hello world\"))();\n```\n\nDeclared functions can't be called immediately this way, because IIFEs must be function _expressions_.\n\n```js-nolint example-bad\nfunction foo() {\n  console.log(\"Hello Foo\");\n}();\n```\n\nIf you'd like to know more about IIFEs, check out the following page on Wikipedia: [Immediately Invoked Function Expression](https://en.wikipedia.org/wiki/Immediately_invoked_function_expression)\n\n## See also\n\n- [Functions](/blog/Web/JavaScript/Guide/Functions)\n- [Arrow Functions](/blog/Web/JavaScript/Reference/Functions/Arrow_functions)\n","slug":"70452e85d592492e91c23f40e48729ec","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:00:08.123Z","dateupdated":"2025-07-05T10:00:08.124Z","layout":"PostBanner"}