{"title":"Public-key cryptography","tag":"glossary/public-key_cryptography","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nPublic-key cryptography — or _asymmetric cryptography_ — is a cryptographic system in which keys come in pairs. The transformation performed by one of the keys can only be undone with the other key. One key (the _private key_) is kept secret while the other is made public.\n\nWhen used for digital signatures, the private key is used to sign and the public key to verify. This means that anyone can verify a signature, but only the owner of the corresponding private key could have generated it.\n\nWhen used for encryption, the public key is used to encrypt and the private key is used to decrypt. This gives public-key encryption systems an advantage over symmetric encryption systems in that the encryption key can be made public. Anyone could encrypt a message to the owner of the private key, but only the owner of the private key could decrypt it. However, they are typically much slower than symmetric algorithms and the size of message they can encrypt is proportional to the size of the key, so they do not scale well for long messages.\n\nAs a result, it's common for an encryption system to use a symmetric algorithm to encrypt the message, then a public-key system to encrypt the symmetric key. This arrangement can confer the benefits of both systems.\n\nCommonly used public-key cryptosystems are RSA (for both signing and encryption), DSA (for signing) and Diffie–Hellman (for key agreement).\nElliptic-curve cryptography offers an alternative approach to these cryptographic systems with the benefit of using comparatively smaller key sizes, faster operations, and smaller storage and transmission.\nPopular elliptic-curve algorithms include [Elliptic-curve Diffie–Hellman](https://en.wikipedia.org/wiki/Elliptic-curve_Diffie–Hellman) and [Elliptic Curve Digital Signature Algorithm](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm), which developers will often encounter abbreviated as **ECDH** and **ECDSA**.\n\n## See also\n\n- [Web Crypto API](/blog/Web/API/Web_Crypto_API)\n- [SubtleCrypto supported algorithms](/blog/Web/API/SubtleCrypto#supported_algorithms)\n- Related glossary terms:\n  - {{Glossary(\"Symmetric-key cryptography\")}}\n- [Public-key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography) on Wikipedia\n","slug":"22625e356a194d0a9b8d4e33b1e68a08","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:01:08.647Z","dateupdated":"2025-07-05T10:01:08.647Z","layout":"PostBanner"}