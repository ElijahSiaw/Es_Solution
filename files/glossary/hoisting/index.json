{"title":"Hoisting","tag":"glossary/hoisting","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nJavaScript **Hoisting** refers to the process whereby the interpreter appears to move the _declaration_ of functions, variables, classes, or imports to the top of their {{glossary(\"scope\")}}, prior to execution of the code.\n\n_Hoisting_ is not a term normatively defined in the ECMAScript specification. The spec does define a group of declarations as [_HoistableDeclaration_](https://tc39.es/ecma262/multipage/ecmascript-language-statements-and-declarations.html#prod-HoistableDeclaration), but this only includes [`function`](/blog/Web/JavaScript/Reference/Statements/function), [`function*`](/blog/Web/JavaScript/Reference/Statements/function*), [`async function`](/blog/Web/JavaScript/Reference/Statements/async_function), and [`async function*`](/blog/Web/JavaScript/Reference/Statements/async_function*) declarations. Hoisting is often considered a feature of [`var`](/blog/Web/JavaScript/Reference/Statements/var) declarations as well, although in a different way. In colloquial terms, any of the following behaviors may be regarded as hoisting:\n\n1. Being able to use a variable's value in its scope before the line it is declared. (\"Value hoisting\")\n2. Being able to reference a variable in its scope before the line it is declared, without throwing a {{jsxref(\"ReferenceError\")}}, but the value is always [`undefined`](/blog/Web/JavaScript/Reference/Global_Objects/undefined). (\"Declaration hoisting\")\n3. The declaration of the variable causes behavior changes in its scope before the line in which it is declared.\n4. The side effects of a declaration are produced before evaluating the rest of the code that contains it.\n\nThe four function declarations above are hoisted with type 1 behavior; `var` declaration is hoisted with type 2 behavior; [`let`](/blog/Web/JavaScript/Reference/Statements/let), [`const`](/blog/Web/JavaScript/Reference/Statements/const), and [`class`](/blog/Web/JavaScript/Reference/Statements/class) declarations (also collectively called _lexical declarations_) are hoisted with type 3 behavior; [`import`](/blog/Web/JavaScript/Reference/Statements/import) declarations are hoisted with type 1 and type 4 behavior.\n\nSome prefer to see `let`, `const`, and `class` as non-hoisting, because the [temporal dead zone](/blog/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz) strictly forbids any use of the variable before its declaration. This dissent is fine, since hoisting is not a universally-agreed term. However, the temporal dead zone can cause other observable changes in its scope, which suggests there's some form of hoisting:\n\n```js\nconst x = 1;\n{\n  console.log(x); // ReferenceError\n  const x = 2;\n}\n```\n\nIf the `const x = 2` declaration is not hoisted at all (as in, it only comes into effect when it's executed), then the `console.log(x)` statement should be able to read the `x` value from the upper scope. However, because the `const` declaration still \"taints\" the entire scope it's defined in, the `console.log(x)` statement reads the `x` from the `const x = 2` declaration instead, which is not yet initialized, and throws a {{jsxref(\"ReferenceError\")}}. Still, it may be more useful to characterize lexical declarations as non-hoisting, because from a utilitarian perspective, the hoisting of these declarations doesn't bring any meaningful features.\n\nNote that the following is not a form of hoisting:\n\n```js\n{\n  var x = 1;\n}\nconsole.log(x); // 1\n```\n\nThere's no \"access before declaration\" here; it's simply because `var` declarations are not scoped to blocks.\n\nFor more information on hoisting, see:\n\n- `var`/`let`/`const` hoisting — [Grammar and types guide](/blog/Web/JavaScript/Guide/Grammar_and_types#variable_hoisting)\n- `function` hoisting — [Functions guide](/blog/Web/JavaScript/Guide/Functions#function_hoisting)\n- `class` hoisting — [Classes guide](/blog/Web/JavaScript/Guide/Using_classes#class_declaration_hoisting)\n- `import` hoisting — [JavaScript modules](/blog/Web/JavaScript/Guide/Modules#import_declarations_are_hoisted)\n\n## See also\n\n- [`var` statement](/blog/Web/JavaScript/Reference/Statements/var)\n- [`let` statement](/blog/Web/JavaScript/Reference/Statements/let)\n- [`const` statement](/blog/Web/JavaScript/Reference/Statements/const)\n- [`function` statement](/blog/Web/JavaScript/Reference/Statements/function)\n- [`class` statement](/blog/Web/JavaScript/Reference/Statements/class)\n- [`import` statement](/blog/Web/JavaScript/Reference/Statements/import)\n","slug":"d0610ed863c84eb98fbd22ae5c8b4ecd","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:00:24.786Z","dateupdated":"2025-07-05T10:00:24.786Z","layout":"PostBanner"}