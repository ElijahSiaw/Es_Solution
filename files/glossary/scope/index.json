{"title":"Scope","tag":"glossary/scope","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nThe **scope** is the current context of execution in which {{glossary(\"value\",\"values\")}} and expressions are \"visible\" or can be referenced. If a {{glossary(\"variable\")}} or expression is not in the current scope, it will not be available for use. Scopes can also be layered in a hierarchy, so that child scopes have access to parent scopes, but not vice versa.\n\nJavaScript has the following kinds of scopes:\n\n- Global scope: The default scope for all code running in script mode.\n- Module scope: The scope for code running in module mode.\n- Function scope: The scope created with a {{glossary(\"function\")}}.\n\nIn addition, identifiers declared with certain syntaxes, including [`let`](/blog/Web/JavaScript/Reference/Statements/let), [`const`](/blog/Web/JavaScript/Reference/Statements/const), [`class`](/blog/Web/JavaScript/Reference/Statements/class), or (in strict mode) [`function`](/blog/Web/JavaScript/Reference/Statements/function), can belong to an additional scope:\n\n- Block scope: The scope created with a pair of curly braces (a [block](/blog/Web/JavaScript/Reference/Statements/block)).\n\nA {{glossary(\"function\")}} creates a scope, so that (for example) a variable defined exclusively within the function cannot be accessed from outside the function or within other functions. For instance, the following is invalid:\n\n```js example-bad\nfunction exampleFunction() {\n  const x = \"declared inside function\"; // x can only be used in exampleFunction\n  console.log(\"Inside function\");\n  console.log(x);\n}\n\nconsole.log(x); // Causes error\n```\n\nHowever, the following code is valid due to the variable being declared outside the function, making it global:\n\n```js example-good\nconst x = \"declared outside function\";\n\nexampleFunction();\n\nfunction exampleFunction() {\n  console.log(\"Inside function\");\n  console.log(x);\n}\n\nconsole.log(\"Outside function\");\nconsole.log(x);\n```\n\nBlocks only scope `let` and `const` declarations, but not `var` declarations.\n\n```js example-good\n{\n  var x = 1;\n}\nconsole.log(x); // 1\n```\n\n```js example-bad\n{\n  const x = 1;\n}\nconsole.log(x); // ReferenceError: x is not defined\n```\n\n## See also\n\n- [Scope (computer science)](<https://en.wikipedia.org/wiki/Scope_(computer_science)>) on Wikipedia\n- [Block scoping rules](/blog/Web/JavaScript/Reference/Statements/block#block_scoping_rules_with_let_const_class_or_function_declaration_in_strict_mode)\n","slug":"be7f371032d440288b072e9c6809d8a4","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:01:13.209Z","dateupdated":"2025-07-05T10:01:13.209Z","layout":"PostBanner"}