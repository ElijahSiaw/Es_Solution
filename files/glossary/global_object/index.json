{"title":"Global object","tag":"glossary/global_object","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nThe **global object** in JavaScript is an {{glossary(\"object\")}} which represents the {{glossary(\"global scope\")}}.\n\n> **Note:** _Globally available objects_, which are objects in the {{glossary(\"global scope\")}}, are sometimes also referred to as global objects, but strictly speaking, there is only one global object per environment.\n\nIn each JavaScript environment, there's always a global object defined. The global object's interface depends on the execution context in which the script is running. For example:\n\n- In a web browser, any code which the script doesn't specifically start up as a background task has a {{domxref(\"Window\")}} as its global object. This is the vast majority of JavaScript code on the Web.\n- Code running in a {{domxref(\"Worker\")}} has a {{domxref(\"WorkerGlobalScope\")}} object as its global object.\n- Scripts running under {{Glossary(\"Node.js\")}} have an object called [`global`](https://nodejs.org/api/globals.html#globals_global) as their global object.\n\nThe [`globalThis`](/blog/Web/JavaScript/Reference/Global_Objects/globalThis) global property allows one to access the global object regardless of the current environment.\n\n[`var`](/blog/Web/JavaScript/Reference/Statements/var) statements and [function declarations](/blog/Web/JavaScript/Reference/Statements/function) at the top level of a script create properties of the global object. On the other hand, {{jsxref(\"Statements/let\", \"let\")}} and {{jsxref(\"Statements/const\", \"const\")}} declarations never create properties of the global object.\n\nThe properties of the global object are automatically added to the {{glossary(\"global scope\")}}.\n\nIn JavaScript, the global object always holds a reference to itself:\n\n```js\nconsole.log(globalThis === globalThis.globalThis); // true (everywhere)\nconsole.log(window === window.window); // true (in a browser)\nconsole.log(self === self.self); // true (in a browser or a Web Worker)\nconsole.log(frames === frames.frames); // true (in a browser)\nconsole.log(global === global.global); // true (in Node.js)\n```\n\n## See also\n\n- Related glossary terms:\n  - {{glossary(\"global scope\")}}\n  - {{glossary(\"object\")}}\n- {{jsxref(\"globalThis\")}}\n- {{domxref(\"Window\")}}\n- {{domxref(\"WorkerGlobalScope\")}}\n- {{domxref(\"Window.window\")}}\n- {{domxref(\"Window.self\")}}\n- {{domxref(\"Window.frames\")}}\n- {{domxref(\"WorkerGlobalScope.self\")}}\n- [`global`](https://nodejs.org/api/globals.html#globals_global)\n","slug":"1131476cadde4eb09056a2e5fa0bcdde","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:00:12.149Z","dateupdated":"2025-07-05T10:00:12.149Z","layout":"PostBanner"}