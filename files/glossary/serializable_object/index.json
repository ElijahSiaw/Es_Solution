{"title":"Serializable object","tag":"glossary/serializable_object","post":"\n\n{{Sidebar(\"Glossary\")}}\n\n**Serializable objects** are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\").\nThis allows them to, for example, be stored on disk and later restored, or cloned with {{DOMxRef(\"Window.structuredClone\", \"structuredClone()\")}}, or shared between workers using {{domxref(\"DedicatedWorkerGlobalScope.postMessage()\")}}.\n\nThe serialization may not include all the properties and other aspects of the original object.\nFor example, a serialization of a {{domxref(\"DOMException\")}} must include the `name` and `message` properties, but whether it includes other properties is implementation dependent.\nAs a result, a deserialized object may not be an identical clone/copy of the original object.\nThe new deserialized object will however be a {{glossary(\"deep copy\")}}, so any properties that were serialized from the original object and then deserialized into the new object will share no references with the original object.\n\nIn some cases when serializing and deserializing an object, it makes sense to transfer some resources rather than creating a copy.\nObjects that can be transferred are called [Transferable objects](/blog/Web/API/Web_Workers_API/Transferable_objects).\n\n## Supported objects\n\nAll primitive values are serializable.\nNot all objects are serializable objects.\nThe objects that can be serialized are listed in: [The structured clone algorithm > Supported types](/blog/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types)\n\n> [!NOTE]\n> Serializable objects are marked up in [Web IDL files](https://github.com/w3c/webref/tree/main/ed/idl) with the attribute `[Serializable]`.\n","slug":"3dae1bf515b345d28b43ef041b5440d1","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:01:14.784Z","dateupdated":"2025-07-05T10:01:14.784Z","layout":"PostBanner"}