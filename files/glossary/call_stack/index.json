{"title":"Call stack","tag":"glossary/call_stack","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nA **call stack** is a mechanism for an interpreter (like the JavaScript interpreter in a web browser) to keep track of its place in a script that calls multiple {{glossary(\"function\",\"functions\")}} â€” what function is currently being run and what functions are called from within that function, etc.\n\n- When a script calls a function, the interpreter adds it to the call stack and then starts carrying out the function.\n- Any functions that are called by that function are added to the call stack further up, and run where their calls are reached.\n- When the current function is finished, the interpreter takes it off the stack and resumes execution where it left off in the last code listing.\n- If the stack takes up more space than it was assigned, a \"stack overflow\" error is thrown.\n\n## Example\n\n```js\nfunction greeting() {\n  // [1] Some code here\n  sayHi();\n  // [2] Some code here\n}\nfunction sayHi() {\n  return \"Hi!\";\n}\n\n// Invoke the `greeting` function\ngreeting();\n\n// [3] Some code here\n```\n\nThe call stack will be empty at the very beginning, and the code above would be executed like this:\n\n1. Ignore all functions, until it reaches the `greeting()` function invocation.\n2. Add the `greeting()` function to the call stack list, and we have:\n\n   ```plain\n   - greeting\n   ```\n\n3. Execute all lines of code inside the `greeting()` function.\n4. Get to the `sayHi()` function invocation.\n5. Add the `sayHi()` function to the call stack list, like:\n\n   ```plain\n   - sayHi\n   - greeting\n   ```\n\n6. Execute all lines of code inside the `sayHi()` function, until reaches its end.\n7. Return execution to the line that invoked `sayHi()` and continue executing the rest of the `greeting()` function.\n8. Delete the `sayHi()` function from our call stack list. Now the call stack looks like:\n\n   ```plain\n   - greeting\n   ```\n\n9. When everything inside the `greeting()` function has been executed, return to its invoking line to continue executing the rest of the JS code.\n10. Delete the `greeting()` function from the call stack list. Once again, the call stack become empty.\n\nIn summary, then, we start with an empty Call Stack. Whenever we invoke a function, it is automatically added to the Call Stack. Once the function has executed all of its code, it is automatically removed from the Call Stack. Ultimately, the Stack is empty again.\n\n## See also\n\n- [Call stack](https://en.wikipedia.org/wiki/Call_stack) on Wikipedia\n- Related glossary terms:\n  - {{Glossary(\"Function\")}}\n","slug":"59092e5821684d0d82f06115bf45d82f","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T09:58:59.270Z","dateupdated":"2025-07-05T09:58:59.270Z","layout":"PostBanner"}