{"title":"Parameter","tag":"glossary/parameter","post":"\n\n{{Sidebar(\"Glossary\")}}\n\n**Parameters** are named variables declared as part of a {{Glossary(\"function\")}}. They are used to reference the {{Glossary(\"argument\", \"arguments\")}} passed into the function.\n\nFor example:\n\n```js\nconst argument1 = \"Web\";\nconst argument2 = \"Development\";\nexample(argument1, argument2); // passing two arguments\n\n// This function takes two values\nfunction example(parameter1, parameter2) {\n  console.log(parameter1); // Output = \"Web\"\n  console.log(parameter2); // Output = \"Development\"\n}\n```\n\nThere are two kinds of parameters:\n\n- input parameters\n  - : the most common kind; they pass values into functions. Depending on the programming language, input parameters can be passed in several ways (e.g., call-by-value, call-by-address, call-by-reference).\n- output/return parameters\n  - : primarily return multiple values from a function, but are not recommended since they cause confusion\n\n### Parameters versus arguments\n\nNote the difference between _parameters_ and _arguments_:\n\n- Function parameters are the names listed in the function's definition.\n- Function {{Glossary(\"argument\",\"arguments\")}} are the real values passed to the function.\n- Parameters are initialized to the values of the arguments supplied.\n\n## See also\n\n- [Difference between _parameters_ and _arguments_](<https://en.wikipedia.org/wiki/Parameter_(computer_programming)#Parameters_and_arguments>)\n- [Function declaration](/blog/Web/JavaScript/Reference/Statements/function)\n- [Function expression](/blog/Web/JavaScript/Reference/Operators/function)\n- Related glossary terms:\n  - {{Glossary(\"Function\")}}\n  - {{Glossary(\"Argument\")}}\n","slug":"d9fcf05cd58e4b39aa100157dd34055b","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:01:03.433Z","dateupdated":"2025-07-05T10:01:03.433Z","layout":"PostBanner"}