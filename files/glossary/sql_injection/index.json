{"title":"Sql injection","tag":"glossary/sql_injection","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nSQL injection takes advantage of Web apps that fail to validate user input. Hackers can maliciously pass SQL commands through the Web app for execution by a backend database.\n\nSQL injection can gain unauthorized access to a database or to retrieve information directly from the database. Many data breaches are due to SQL injection.\n\n![Pie chart of most common vulnerabilities: SQL Injection is responsible for 50% of vulnerabilities, Cross Site Scripting is responsible for 42% of vulnerabilities, Source Code Disclosure is responsible for 7% of vulnerabilities.](sql_inj_xss.gif)\n\n[Original source](https://cdn.acunetix.com/wp_content/uploads/2010/09/sql_inj_xss.gif)\n\n## How It Works\n\n![Screenshot of the login form with username and password fields](updates_loginscreen.png)\n\nAfter entering username and password, behind the GUI the SQL queries work as follows:\n\n```sql\n\"SELECT Count(*) FROM Users WHERE Username=' \" + txt.User.Text+\" ' AND Password=' \"+ txt.Password.Text+\" ' \";\n```\n\nNow suppose User enters the Username: admin and Password: passwd123, so after clicking on the Log in button, SQL query will run as follows:\n\n```sql\n\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' passwd123 ' \";\n```\n\nIf the credentials are correct, then the user is allowed to log in, so it's a very simple (and therefore insecure) mechanism. Hackers use this insecurity to gain unauthorized access.\n\nHackers use a simple string called a Magical String, for example:\n\n**Username: _admin_**\n\n**Password: _anything 'or'1'='1_**\n\nAfter clicking on the login button, the SQL query will work as follows:\n\n```sql\n\"SELECT Count(*) FROM Users WHERE Username=' admin ' AND Password=' anything 'or'1'='1 ' \";\n```\n\nJust take a closer look at the above query's password section.\n\n```plain\nPassword=' anything 'or'1'='1 '\n```\n\nThe password is not 'anything', hence password=anything results in FALSE, but '1'='1' is a TRUE statement and hence returns a TRUE value. Finally, due to the OR operator, the value (FALSE OR TRUE) is TRUE, so authentication bypasses successfully. Just due to a simple string (Magical String) the entire database is compromised.\n\n## How To Prevent\n\nBefore executing the queries for the user credentials, make some changes like the following:\n\n```php\n$id = $_GET[\"id\"]\n\n(1) $id = stripslashes($id)\n\n(2) $id = mysql_real_escape_String($id)\n```\n\nSo due to (1) each single quote (') in the input string is replaced with double quotes (\"), and due to (2) before every (') it adds (/). The revised magical string fails to bypass the authentication, and your database stays secure.\n\n## See also\n\n- [SQL injection](https://en.wikipedia.org/wiki/SQL_injection) on Wikipedia\n- [Explanation of SQL injection](https://owasp.org/www-community/attacks/SQL_Injection) on OWASP (Open Web Application Security Project)\n","slug":"93ddf56355cf4460ad5fbf031b5bae0e","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:01:17.349Z","dateupdated":"2025-07-05T10:01:17.349Z","layout":"PostBanner"}