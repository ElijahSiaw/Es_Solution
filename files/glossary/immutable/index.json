{"title":"Immutable","tag":"glossary/immutable","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nAn **immutable** value is one whose content cannot be changed without creating an entirely new value, in comparison with {{Glossary(\"mutable\", \"mutable values\")}}.\n\nIn {{glossary(\"JavaScript\")}}, {{Glossary(\"primitive\", \"primitive values\")}} are immutable — once a primitive value is created, it cannot be changed, although the variable that holds it may be reassigned another value.\nBy contrast, {{Glossary(\"Object\",\"objects\")}} and {{Glossary(\"Array\",\"arrays\")}} are mutable by default — their properties and elements can be changed without reassigning a new value.\n\nIt can be beneficial to use immutable objects for several reasons:\n\n- To improve performance (no planning for the object's future changes)\n- To reduce memory use (make {{glossary(\"object reference\",\"object references\")}} instead of cloning the whole object)\n- Thread-safety (multiple threads can reference the same object without interfering with one other)\n- Lower developer mental burden (the object's state won't change and its behavior is always consistent)\n\nNote that you can easily prove mutability: an object is mutable as long as it offers one way to change its properties. On the other hand, _immutability_ is hard to prove if there are no language semantics to secure it — it is a matter of developer contract. For example, {{jsxref(\"Object.freeze()\")}} is a language-level method to make an object immutable in JavaScript.\n\n## See also\n\n- [Immutable object](https://en.wikipedia.org/wiki/Immutable_object) on Wikipedia\n- Related glossary terms:\n  - {{glossary(\"Mutable\")}}\n","slug":"a33c1e44e22c4145b15ad8f045e1f101","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T10:00:39.746Z","dateupdated":"2025-07-05T10:00:39.746Z","layout":"PostBanner"}