{"title":"Binding","tag":"glossary/binding","post":"\n\n{{Sidebar(\"Glossary\")}}\n\nIn programming, a **binding** is an association of an {{glossary(\"identifier\")}} with a value. Not all bindings are {{glossary(\"variable\", \"variables\")}} — for example, function {{glossary(\"parameter\", \"parameters\")}} and the binding created by the {{jsxref(\"Statements/try...catch\", \"catch (e)\")}} block are not \"variables\" in the strict sense. In addition, some bindings are implicitly created by the language — for example, {{jsxref(\"Operators/this\", \"this\")}} and [`new.target`](/blog/Web/JavaScript/Reference/Operators/new.target) in JavaScript.\n\nA binding is {{glossary(\"mutable\")}} if it can be re-assigned, and {{glossary(\"immutable\")}} otherwise; this does _not_ mean that the value it holds is immutable.\n\nA binding is often associated with a {{glossary(\"scope\")}}. Some languages allow re-creating bindings (also called redeclaring) within the same scope, while others don't; in JavaScript, whether bindings can be redeclared depends on the construct used to create the binding.\n\n## See also\n\n- {{jsxref(\"Statements/var\", \"var\")}}\n- {{jsxref(\"Statements/let\", \"let\")}}\n- {{jsxref(\"Statements/const\", \"const\")}}\n- {{jsxref(\"Statements/function\", \"function\")}}\n- {{jsxref(\"Statements/class\", \"class\")}}\n","slug":"b22bb336fbe84b75b71e4fdf58206165","authors":"Admin Es Solution","draft":false,"datecreated":"2025-07-05T09:58:52.942Z","dateupdated":"2025-07-05T09:58:52.942Z","layout":"PostBanner"}